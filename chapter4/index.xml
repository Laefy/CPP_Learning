<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>H√©ritage on Cours de C&#43;&#43; - Niveau Master</title>
    <link>https://laefy.github.io/CPP_Learning/chapter4/</link>
    <description>Recent content in H√©ritage on Cours de C&#43;&#43; - Niveau Master</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <atom:link href="https://laefy.github.io/CPP_Learning/chapter4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>üíº Hi√©rarchie professionnelle</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/1-hierarchy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter4/1-hierarchy/</guid>
      <description>Dans cette premi√®re partie, vous apprendrez comment d√©finir des relations de parent√© entre vos classes.&#xA;Nous ne parlerons sur cette page que d&amp;rsquo;h√©ritage dit &amp;ldquo;statique&amp;rdquo;, c&amp;rsquo;est-√†-dire que nous ne chercherons pas √† modifier dans les classes-fille le comportement h√©rit√© de la classe-m√®re.&#xA;Pour cet exercice, vous modifierez les fichiers :&#xA;- chap-04/1-hierarchy/Boss.cpp&#xA;- chap-04/1-hierarchy/Boss.h&#xA;- chap-04/1-hierarchy/Staff.cpp&#xA;- chap-04/1-hierarchy/Staff.h&#xA;- chap-04/1-hierarchy/Intern.cpp&#xA;- chap-04/1-hierarchy/Intern.h&#xA;La cible √† compiler est c4-1-hierarchy.&#xA;D√©finir une classe-m√®re Commencez par jeter un coup d&amp;rsquo;oeil √† chacun des fichiers fournis.</description>
    </item>
    <item>
      <title>üêÆ Concerto animalier</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/2-farm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter4/2-farm/</guid>
      <description>Vous allez maintenant apprendre √† d√©finir des classes permettant √† leurs enfants de sp√©cialiser leur comportement. On parle alors de classe polymorphe.&#xA;Nous ferons un petit r√©capitulatif en fin de page, pour rappelez les points essentiels auxquels il faut faire attention lorsque vous d√©finissez des classes polymorphes pour √©viter les bugs.&#xA;Pour cet exercice, vous modifierez les fichiers :&#xA;- chap-04/2-farm/FarmHouse.cpp&#xA;- chap-04/2-farm/Animal.h&#xA;- chap-04/2-farm/Dog.h&#xA;- chap-04/2-farm/Cat.h&#xA;- chap-04/2-farm/Chicken.h&#xA;- chap-04/2-farm/Cow.</description>
    </item>
    <item>
      <title>R√©solution d&#39;appel virtuel</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/3-virtual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter4/3-virtual/</guid>
      <description>Nous allons maintenant rentrer dans les d√©tails de ce qu&amp;rsquo;il se passe sous le manteau, lorsque le programme effectue un appel virtuel.&#xA;Virtual table Lorsqu&amp;rsquo;une classe Parent contenant des fonctions virtuelles est compil√©e, le compilateur va g√©n√©rer pour l&amp;rsquo;ensemble des classes qui en d√©rivent une virtual table. Il s&amp;rsquo;agit d&amp;rsquo;une tableau qui contient, pour chaque fonction virtuelle de la classe, un pointeur sur la fonction qui sera vraiment appel√©e.&#xA;Analysons la hi√©rarchie suivante :</description>
    </item>
    <item>
      <title>Polymorphisme</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/4-polymorphism/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter4/4-polymorphism/</guid>
      <description>Vous avez probablement d√©j√† entendu le terme polymorphisme, vous l&amp;rsquo;avez peut-√™tre m√™me d√©j√† utilis√©, mais quand vous y r√©fl√©chissez, si on vous demandait de le d√©finir clairement, vous ne sauriez pas forc√©ment quoi r√©pondre. Cette page sera donc l&amp;rsquo;occasion de revenir sur sa d√©finition.&#xA;Dans ce chapitre, nous nous sommes int√©ress√©s √† deux mani√®res de mettre-en-ouvre le polymorphisme en C++ : l&amp;rsquo;h√©ritage statique et l&amp;rsquo;h√©ritage dynamique. Nous d√©taillerons les diff√©rences entre les deux et dans quels cas utiliser l&amp;rsquo;un ou l&amp;rsquo;autre.</description>
    </item>
    <item>
      <title>üöó V√©hicule partag√©</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/5-vehicles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter4/5-vehicles/</guid>
      <description>Pour terminer ce chapitre, nous allons voir comment faire pour acc√©der directement aux attributs de votre classe de base, comment appeler la fonction parent depuis la r√©d√©finition de cette fonction dans la classe-fille et enfin, comment mod√©liser des classes abstraites.&#xA;Pour cet exercice, vous modifierez les fichiers :&#xA;- chap-04/3-vehicles/Program.cpp&#xA;- chap-04/3-vehicles/Vehicle.h&#xA;- chap-04/3-vehicles/Car.h&#xA;- chap-04/3-vehicles/Scooter.h&#xA;La cible √† compiler est c4-3-vehicles.&#xA;Introduction du permis Dans le programme que l&amp;rsquo;on vous fournit, n&amp;rsquo;importe qui peut conduire n&amp;rsquo;importe quoi.</description>
    </item>
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter4/test/</guid>
      <description>Vous avez termin√© le Chapitre 4 ! C&amp;rsquo;est donc maintenant le moment de connecter vos neurones pour r√©pondre aux questions suivantes.&#xA;Bon courage √† vous üôÇ&#xA;Vous √™tes : Votre adresse mail : Votre groupe : Initiaux 1&#xD;Initiaux 2&#xD;Alternants&#xD;1- Qu‚Äôest-ce qu‚Äôune classe polymorphe ?&#xA;2- D√©finissez une classe polymorphe Nothing qui ne fait rien.&#xA;3- Comment repr√©senter une classe abstraite en C++ ?&#xA;Les questions 4 √† 6 font r√©f√©rence au code suivant :</description>
    </item>
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter4/summary/</guid>
      <description>Ce qu&amp;rsquo;il faut savoir faire Langage D√©finir une relation de parent√© publique entre deux classes : class Child : public Parent { ... }; D√©finir un membre (fonction ou attribut) accessible uniquement depuis la classe courante et ses enfants : protected : int _a1 = 0; char _a2 = &#39;a&#39;; Appeler le constructeur de la classe parent : Child(int p1, int p2) : Parent { p1 }, _p2 { p2 } { .</description>
    </item>
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter4/test_done/</guid>
      <description>&#xD;Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ&#xD;N&#39;h√©sitez pas √† nous relancer si vous n&#39;avez pas eu de nouvelles apr√®s une semaine !&#xD;</description>
    </item>
  </channel>
</rss>
