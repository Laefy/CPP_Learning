<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithmes on Cours de C&#43;&#43; - Niveau Master</title>
    <link>https://laefy.github.io/CPP_Learning/chapter6/</link>
    <description>Recent content in Algorithmes on Cours de C&#43;&#43; - Niveau Master</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://laefy.github.io/CPP_Learning/chapter6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Parcours et recherches</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/1-searches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter6/1-searches/</guid>
      <description>Parcours de plages Pour parcourir une plage d&amp;rsquo;√©l√©ments, vous devriez normalement d√©j√† savoir qu&amp;rsquo;il faut utiliser une boucle for ou foreach. Les boucles while et do-while ne sont en effet pas vraiment adapt√©es √† ce type d&amp;rsquo;usage.
Vous trouverez quelques conseils dans cette partie pour rendre votre code plus lisible, concis et fiable.
 Boucle foreach Lorsqu&amp;rsquo;on it√®re sur un conteneur avec une boucle foreach, il faut faire attention √† si l&amp;rsquo;on souhaite r√©cup√©rer une copie de l&amp;rsquo;√©l√©ment ou une r√©f√©rence.</description>
    </item>
    
    <item>
      <title>Transformations</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/2-transformations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter6/2-transformations/</guid>
      <description>Maintenant que nous vous avons pr√©sent√© les fonctions permettant de r√©cup√©rer des informations √† partir d&amp;rsquo;une plage d&amp;rsquo;√©l√©ments, nous allons vous pr√©senter celles qui permettent de manipuler et de transformer ces plages.
 Suppressions Afin de supprimer des √©l√©ments d&amp;rsquo;une plage, on utilise la fonction std::remove. Cette fonction a pour effet de d√©placer les √©l√©ments √† conserver au d√©but de la plage, en pr√©servant leur ordre. Elle renvoie un it√©rateur sur le nouvel it√©rateur de fin de plage.</description>
    </item>
    
    <item>
      <title>It√©rateurs</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/3-iterators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter6/3-iterators/</guid>
      <description>Normalement, avec tout ce que vous avez vu jusqu&amp;rsquo;ici, vous devriez √™tre capable d&amp;rsquo;utiliser correctement un it√©rateur :
 d√©r√©f√©rencement avec *it incr√©mentation avec ++it r√©cup√©rer les it√©rateurs de d√©but et de fin d&amp;rsquo;un conteneur avec ctn.begin() et ctn.end() ins√©rer un √©l√©ment dans un conteneur avec auto it_on_new = ctn.insert(it, new_value) supprimer un √©l√©ment d&amp;rsquo;un conteneur avec auto it_on_next = ctn.erase(it)  Vous allez maintenant voir ce qu&amp;rsquo;il faut faire pour impl√©menter vos propres it√©rateurs.</description>
    </item>
    
    <item>
      <title>Lambdas</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/4-lambdas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter6/4-lambdas/</guid>
      <description>Les lambdas sont des objets-fonction un peu sp√©ciaux, que l&amp;rsquo;on peut facilement d√©finir depuis le corps d&amp;rsquo;une fonction. Vous avez d√©j√† d√ª voir de nombreux exemples d&amp;rsquo;utilisation de lambda tout au long de ce cours. Nous allons maintenant revenir plus en d√©tail sur leur fonctionnement et vous montrez tout ce qu&amp;rsquo;il est possible de faire avec.
 Syntaxe La d√©finition d&amp;rsquo;une lambda est compos√©e en g√©n√©ral de trois parties :</description>
    </item>
    
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter6/test/</guid>
      <description>C&amp;rsquo;est l&amp;rsquo;heure du test ! N&amp;rsquo;oubliez pas que vous pouvez utiliser Godbolt pour compiler et tester des petits bouts de code.
Bon courage √† vous üôÇ
 Vous √™tes : Votre adresse mail : Votre groupe : Initiaux 1Initiaux 2Alternants 1Alternants 21- Quel type de boucle faut-il utiliser pour modifier la structure d‚Äôun conteneur lors d‚Äôun parcours ?

2- Dans quel cas peut-il √™tre int√©ressant d‚Äôutiliser la fonction std::for_each ?</description>
    </item>
    
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter6/test_done/</guid>
      <description>Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ Retourner √† la synth√®se du Chapitre</description>
    </item>
    
  </channel>
</rss>
