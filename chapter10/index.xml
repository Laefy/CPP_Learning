<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Param√®tres de templates on Cours de C&#43;&#43; - Niveau Master</title>
    <link>https://laefy.github.io/CPP_Learning/chapter10/</link>
    <description>Recent content in Param√®tres de templates on Cours de C&#43;&#43; - Niveau Master</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <atom:link href="https://laefy.github.io/CPP_Learning/chapter10/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>R√©f√©rence universelle</title>
      <link>https://laefy.github.io/CPP_Learning/chapter10/1-universal-ref/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter10/1-universal-ref/</guid>
      <description>Dans cette premi√®re section, nous commencerons par introduire les concepts de l-value et r-value.&#xA;Cela nous conduira √† vous pr√©senter la notion de r√©f√©rence universelle. Nous vous expliquerons ensuite quand et comment vous en servir dans votre code.&#xA;l-value / r-value Avant de parler concr√®tement des r√©f√©rences universelles, il faut aborder un point essentiel √† leur compr√©hension.&#xA;En C++, une expression est une suite d&amp;rsquo;op√©rateurs et d&amp;rsquo;op√©randes pouvant √™tre √©valu√©e. L&amp;rsquo;√©valuation d&amp;rsquo;une expression peut parfois produire une valeur.</description>
    </item>
    <item>
      <title>Template variadique</title>
      <link>https://laefy.github.io/CPP_Learning/chapter10/2-variadiac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter10/2-variadiac/</guid>
      <description>Un template variadique, c&amp;rsquo;est un template qui attend un nombre variable de param√®tres. Vous en avez d√©j√† utilis√© plusieurs, comme :&#xA;- la fonction-template emplace_back de std::vector, qui attend n&amp;rsquo;importe quels nombres et types d&amp;rsquo;arguments, et les utilisent pour construire le nouvel √©l√©ment,&#xA;- la fonction-template std::make_unique, qui fonctionne sur le m√™me principe,&#xA;- la classe-template std::tuple, qui permet de repr√©senter un N-uplet contenant n&amp;rsquo;importe quels types.&#xA;L&amp;rsquo;objectif de cette section sera de vous apprendre √† d√©finir vos propres templates variadiques.</description>
    </item>
    <item>
      <title>Sp√©cialisations</title>
      <link>https://laefy.github.io/CPP_Learning/chapter10/3-specializations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter10/3-specializations/</guid>
      <description>Cette section sera consacr√©e √† la sp√©cialisation de templates de fonctions et de classes.&#xA;Une sp√©cialisation est la red√©finition d&amp;rsquo;une entit√©e templat√©e, qui va s&amp;rsquo;appliquer pour des param√®tres particuliers. Il y a de nombreux cas d&amp;rsquo;utilisation des sp√©cialisation, l&amp;rsquo;un d&amp;rsquo;entre eux √©tant de d√©finir de traiter des cas particuliers.&#xA;Sp√©cialisation de fonctions Soit la fonction templat√©e suivante, permettant d&amp;rsquo;afficher des valeurs dans le terminal :&#xA;template &amp;lt;typename T&amp;gt; void print(const T&amp;amp; value) { std::cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; std::endl; } Si on lui passe des bool√©ens, cette fonction affichera 0 ou 1.</description>
    </item>
    <item>
      <title>SFINAE</title>
      <link>https://laefy.github.io/CPP_Learning/chapter10/4-sfinae/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter10/4-sfinae/</guid>
      <description>Nous allons maintenant vous expliquer ce que signifie SFINAE, le besoin auquel ce m√©canisme r√©pond et comment le mettre en oeuvre dans votre code.&#xA;Le besoin Supposons que nous souhaitions pouvoir r√©cup√©rer une clef pour diff√©rents type √† l&amp;rsquo;aide d&amp;rsquo;une fonction get_key(const Type&amp;amp;), en utilisant des overloads.&#xA;class Person { public: Person(const std::string&amp;amp; name) : _name { name } {} const std::string&amp;amp; get_name() const { return _name; } private: const std::string _name; }; // Overload pour notre classe Person.</description>
    </item>
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter10/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter10/test/</guid>
      <description>Pas de questionnaire cette semaine, parce que mis en ligne trop tard.&#xA;N&amp;rsquo;h√©sitez n√©anmoins pas √† utiliser le formulaire pour envoyer vos questions.&#xA;Vous √™tes : Votre adresse mail : Votre groupe : Initiaux 1&#xD;Initiaux 2&#xD;Alternants&#xD;Combien de temps avez-vous mis √† compl√©ter ce chapitre ?&#xD;Avez-vous des questions suite √† sa lecture ?&#xD;Avez-vous des commentaires concernant le chapitre et/ou le site ?&#xD;</description>
    </item>
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter10/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter10/summary/</guid>
      <description>// üößüö•üî® //</description>
    </item>
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter10/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter10/test_done/</guid>
      <description>&#xD;Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ&#xD;N&#39;h√©sitez pas √† nous relancer si vous n&#39;avez pas eu de nouvelles apr√®s une semaine !&#xD;</description>
    </item>
  </channel>
</rss>
