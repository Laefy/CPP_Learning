<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Astuces on Cours de C&#43;&#43; - Niveau Master</title>
    <link>https://laefy.github.io/CPP_Learning/chapter0/6-tips/</link>
    <description>Recent content in Astuces on Cours de C&#43;&#43; - Niveau Master</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://laefy.github.io/CPP_Learning/chapter0/6-tips/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Petits programmes</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/6-tips/1-snippets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/6-tips/1-snippets/</guid>
      <description>Voici 2 solutions permettant de compiler et de tester rapidement des petits programme.
 Compiler Explorer Vous pouvez utiliser Compiler Explorer pour compiler du code avec à peu près tous les compilateurs de la Terre.
Cet utilitaire vous permet également d&amp;rsquo;exécuter directement votre programme.
 Depuis un terminal Pour compiler Avec g++ :
g++f1.cpp f2.cpp f3.cpp -o program Avec clang :
clang++f1.cpp f2.cpp f3.cpp -o program Vous pouvez ajouter des options de compilation à la fin de la ligne de commande.</description>
    </item>
    
    <item>
      <title>Projets VSCode</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/6-tips/2-vscode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/6-tips/2-vscode/</guid>
      <description>Lorsque vous avez un projet un peu plus conséquent, il est plus pratique de passer par VSCode pour configurer, compiler et tester vos programmes.
 Configuration avec CMake Vous aurez besoin d&amp;rsquo;un fichier CMakeLists.txt à la racine de votre répertoire pour configurer le projet. Si celui-ci ne contient qu&amp;rsquo;un seul programme, vous pouvez copier et adapter dans votre CMakeLists.txt les instructions suivantes.
cmake_minimum_required(VERSION 3.1)project(my_project)add_executable(my_executablemy_file1.cppmy_file2.cppmy_file3.h)target_compile_features(my_executable PUBLIC cxx_std_17)Pour configurer le projet, utilisez la commande CMake: Configure.</description>
    </item>
    
    <item>
      <title>Raccourcis &amp; Commandes</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/6-tips/3-keybinds-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/6-tips/3-keybinds-commands/</guid>
      <description>Général Ouvrir le panneau de commandes VSCode :
Ctrl+Shift+P
 Configuration, Compilation, Exécution Configurer le projet :
CMake: Configure
 Compiler un programme :
CMake: Build Target (Shift+F7)
 Changer le programme à exécuter :
CMake: Set Debug Target
 Lancer le programme :
Debug: Start Debugging (F5)
 Debugging Placer un breakpoint à la ligne du curseur :
F9
 Reprendre l&amp;rsquo;exécution :
F5
 Exécuter l&amp;rsquo;instruction suivante :</description>
    </item>
    
    <item>
      <title>Options de compilation</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/6-tips/4-options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/6-tips/4-options/</guid>
      <description>Si vous compilez via le terminal ou avec Compiler Explorer, nous vous conseillons d&amp;rsquo;utiliser les options ci-dessous, car nous les activerons pour vos rendus de projet :
 -std=c++17 : spécifie que le projet sera compilé en C++17 -Wall -W : permet d&amp;rsquo;activer un certain nombre de warnings -Werror : transforme les warnings en erreurs, donc tant qu&amp;rsquo;il y a des warnings, le programme ne compile pas  Sachez par ailleurs que vous pouvez également utiliser :</description>
    </item>
    
  </channel>
</rss>
