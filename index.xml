<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Accueil on Cours de C&#43;&#43; - Niveau Master</title>
    <link>https://laefy.github.io/CPP_Learning/</link>
    <description>Recent content in Accueil on Cours de C&#43;&#43; - Niveau Master</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://laefy.github.io/CPP_Learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Assertions</title>
      <link>https://laefy.github.io/CPP_Learning/chapter7/1-assertions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter7/1-assertions/</guid>
      <description>Types d&amp;rsquo;erreurs Lorsqu&amp;rsquo;une erreur se produit dans un logiciel, il s&amp;rsquo;agit soit d&amp;rsquo;une erreur de programmation, soit d&amp;rsquo;une erreur d&amp;rsquo;utilisation du logiciel.
Voici quelques exemples :
 Un pointeur null a √©t√© d√©r√©f√©renc√© : erreur de programmation. Le programme a demand√© √† l&amp;rsquo;utilisateur de rentrer une image, mais celui-ci a fournit un fichier texte : erreur d&amp;rsquo;utilisation. On a √©crit dans la case array.size() de array : erreur de programmation.</description>
    </item>
    
    <item>
      <title>C&#39;est quoi un objet d√©j√† ?</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/1-poo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/1-poo/</guid>
      <description>Commen√ßons par donner quelques rappels des notions de POO que vous avez pu voir l&amp;rsquo;an dernier.
 Objet Dans un programme, un objet est un √©l√©ment constitu√© d&amp;rsquo;un √©tat, et disposant d&amp;rsquo;une interface permettant d&amp;rsquo;int√©ragir avec cet √©tat.
Classe Un objet est g√©n√©ralement cr√©√© √† partir d&amp;rsquo;un mod√®le, que l&amp;rsquo;on appelle classe. Un objet cr√©√© √† partir d&amp;rsquo;une classe constitue une instance de cette classe.
Etat L&amp;rsquo;√©tat d&amp;rsquo;un objet est un ensemble de valeurs, pouvant ou non varier au cours de l&amp;rsquo;ex√©cution du programme.</description>
    </item>
    
    <item>
      <title>Compilateur</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/1-compiler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/1-compiler/</guid>
      <description>Pour le compilateur, vous devrez utiliser g++ (version &amp;gt;= 9) si vous √™tes sous Windows ou Linux, et clang si vous √™tes sous MacOS.
 Windows  Ouvrez un terminal et ex√©cutez g++ -v. Si la commande r√©ussit, assurez-vous que la derni√®re ligne indique bien une version de gcc &amp;gt;= 9. Si ce n&amp;rsquo;est pas le cas, installez le gestionnaire de paquet MSYS2 en suivant les instructions sur cette page.</description>
    </item>
    
    <item>
      <title>Dur√©e de vie</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/1-lifespan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter5/1-lifespan/</guid>
      <description>Pour cet exercice, vous modifierez les fichiers :
- chap-05/1-teachers/DataBase.cpp
- chap-05/1-teachers/DataBase.h
La cible √† compiler est c5-1-teachers.
 D√©finition La dur√©e de vie d&amp;rsquo;une ressource (bloc de m√©moire, flux, connection r√©seau, etc) correspond √† la p√©riode durant laquelle cette ressource est valide.
Le C++ est un langage dans lequel nous avons la main sur la dur√©e de vie de nos ressources. Dans le cas d&amp;rsquo;un objet, sa dur√©e de vie s&amp;rsquo;√©tend de sa construction √† sa destruction.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://laefy.github.io/CPP_Learning/chapter8/1-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter8/1-introduction/</guid>
      <description>Qu&amp;rsquo;est-ce qu&amp;rsquo;un template ? Les templates sont un m√©canisme du C++ permettant de faire de la programmation g√©n√©rique.
Le terme &amp;ldquo;template&amp;rdquo; se traduit litt√©ralement par &amp;ldquo;patron&amp;rdquo; en fran√ßais (au sens patron de v√™tement, pas patron d&amp;rsquo;entreprise). Les templates vont donc permettre de construire un mod√®le de classe (ou de fonction) √† partir duquel le compilateur pourra de g√©n√©rer de v√©ritables classes (ou fonctions).
Notez donc bien que malgr√© le terme, une classe-template n&amp;rsquo;est pas une classe.</description>
    </item>
    
    <item>
      <title>Parcours et recherches</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/1-searches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter6/1-searches/</guid>
      <description>Parcours de plages Pour parcourir une plage d&amp;rsquo;√©l√©ments, vous devriez normalement d√©j√† savoir qu&amp;rsquo;il faut utiliser une boucle for ou foreach. Les boucles while et do-while ne sont en effet pas vraiment adapt√©es √† ce type d&amp;rsquo;usage.
Vous trouverez quelques conseils dans cette partie pour rendre votre code plus lisible, concis et fiable.
 Boucle foreach Lorsqu&amp;rsquo;on it√®re sur un conteneur avec une boucle foreach, il faut faire attention √† si l&amp;rsquo;on souhaite r√©cup√©rer une copie de l&amp;rsquo;√©l√©ment ou une r√©f√©rence.</description>
    </item>
    
    <item>
      <title>Pr√©sentation du langage</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/1-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/1-language/</guid>
      <description>Cette page vous pr√©sentera quelques caract√©ristiques du C++, les diff√©rences avec d&amp;rsquo;autres langages que vous avez √©tudi√©s jusque l√†, pourquoi est-ce que certains disent que C++ est compliqu√©, alors que pas forc√©ment, et ce qui fait que le langage est aussi utilis√© aujourd&amp;rsquo;hui. Promis, c&amp;rsquo;est la seule page du cours o√π vous trouverez autant de pav√©s üôÇ
 Quelques caract√©ristiques C++ est un langage de programmation informatique invent√© dans les ann√©es 1980 par un informaticien nomm√© Bjarne Stroupstrup.</description>
    </item>
    
    <item>
      <title>R√©f√©rence universelle</title>
      <link>https://laefy.github.io/CPP_Learning/chapter9/1-universal-ref/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter9/1-universal-ref/</guid>
      <description>Dans cette premi√®re section, nous commencerons par introduire les concepts de l-value et r-value.
Cela nous conduira √† vous pr√©senter la notion de r√©f√©rence universelle. Nous vous expliquerons ensuite quand et comment vous en servir dans votre code.
 l-value / r-value Avant de parler concr√®tement des r√©f√©rences universelles, il faut aborder un point essentiel √† leur compr√©hension.
En C++, une expression est une suite d&amp;rsquo;op√©rateurs et d&amp;rsquo;op√©randes pouvant √™tre √©valu√©e.</description>
    </item>
    
    <item>
      <title>Un peu de doc...</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/1-doc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/1-doc/</guid>
      <description>Pour d√©marrez ce chapitre, nous allons vous expliquer comment parcourir la documentation que vous trouverez sur le site cppreference.
Commencez par ouvrir cette page. Vous y trouverez la documentation de la classe vector.
A premi√®re vue, son contenu peut para√Ætre indigeste. Nous allons donc vous expliquer comment il est structur√© afin que vous puissiez vous y rep√©rer plus facilement.
 Documentation d&amp;rsquo;une classe 1. En-t√™te Dans l&amp;rsquo;en-t√™te de la documentation, vous trouverez le nom de la classe, suivi du header √† inclure afin de pouvoir l&amp;rsquo;utiliser.</description>
    </item>
    
    <item>
      <title>üëã Hello World</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/3-practice/1-hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/3-practice/1-hello-world/</guid>
      <description>Pour votre premier programme, on ne va pas trop faire dans l&amp;rsquo;originalit√©, il s&amp;rsquo;agira d&amp;rsquo;un Hello World. Vous l&amp;rsquo;avez d&amp;rsquo;ailleurs d√©j√† probablement vu dans la rubrique pr√©c√©dente, pour tester vos outils.
 Pour cet exercice, vous modifierez le fichier :
- chap-01/1-hello_world.cpp
La cible √† compiler est c1-1-hello_world.
 La fonction main Tout d&amp;rsquo;abord, commen√ßons par √©crire la fonction qui est appel√©e lorsqu&amp;rsquo;on lance le programme. On parle de point d&amp;rsquo;entr√©e.</description>
    </item>
    
    <item>
      <title>üíº Hi√©rarchie professionnelle</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/1-hierarchy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter4/1-hierarchy/</guid>
      <description>Dans cette premi√®re partie, vous apprendrez comment d√©finir des relations de parent√© entre vos classes.
Nous ne parlerons sur cette page que d&amp;rsquo;h√©ritage dit &amp;ldquo;statique&amp;rdquo;, c&amp;rsquo;est-√†-dire que nous ne chercherons pas √† modifier dans les classes-fille le comportement h√©rit√© de la classe-m√®re.
 Pour cet exercice, vous modifierez les fichiers :
- chap-04/1-hierarchy/Boss.cpp
- chap-04/1-hierarchy/Boss.h
- chap-04/1-hierarchy/Staff.cpp
- chap-04/1-hierarchy/Staff.h
- chap-04/1-hierarchy/Intern.cpp
- chap-04/1-hierarchy/Intern.h
La cible √† compiler est c4-1-hierarchy.
 D√©finir une classe-m√®re Commencez par jeter un coup d&amp;rsquo;oeil √† chacun des fichiers fournis.</description>
    </item>
    
    <item>
      <title>Exceptions</title>
      <link>https://laefy.github.io/CPP_Learning/chapter7/2-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter7/2-exceptions/</guid>
      <description>Qu&amp;rsquo;est-ce qu&amp;rsquo;une exception ? En C++, une exception sert √† interrompre le flot classique d&amp;rsquo;ex√©cution du programme lorsqu&amp;rsquo;un √©v√©nement particulier se produit. Lorsqu&amp;rsquo;une exception est lanc√©e, on sort du bloc courant, et on remonte la callstack autant que n√©cessaire, jusqu&amp;rsquo;√† atteindre un bloc capable de traiter l&amp;rsquo;exception.
C&amp;rsquo;est donc un m√©canisme extr√™mement utilis√© pour le traitement des erreurs (autant de programmation que d&amp;rsquo;utilisation), puisque l&amp;rsquo;erreur est remont√©e automatiquement jusqu&amp;rsquo;√† l&amp;rsquo;endroit qui peut la traiter, sans avoir besoin de toucher au code des fonctions interm√©diaires.</description>
    </item>
    
    <item>
      <title>Exemples</title>
      <link>https://laefy.github.io/CPP_Learning/chapter8/2-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter8/2-examples/</guid>
      <description>Nous allons maintenant rentrer dans le vif du sujet en vous pr√©sentant le code de diff√©rents templates.
Nous d√©taillerons ensuite chacun des √©l√©ments de la syntaxe, afin que vous puissiez les comprendre pour les r√©utiliser dans votre propre code.
 Premier exemple de classe-template Cet exemple consiste en l&amp;rsquo;impl√©mentation d&amp;rsquo;un tableau de taille statique (un peu comme la classe std::array).
#include &amp;lt;algorithm&amp;gt;#include &amp;lt;cassert&amp;gt;#include &amp;lt;iostream&amp;gt; template &amp;lt;typename ElementType, size_t Size&amp;gt; class StaticArray { public: // Rappel: l&amp;#39;impl√©mentation par d√©faut du constructeur par d√©faut dispara√Æt lorsqu&amp;#39;on  // d√©finit explicitement un autre constructeur (ce qui est le cas ici).</description>
    </item>
    
    <item>
      <title>Ownership</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/2-ownership/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter5/2-ownership/</guid>
      <description>Pour cet exercice, vous modifierez les fichiers :
- chap-05/2-pokemons/Journey.cpp
- chap-05/2-pokemons/PC.h
- chap-05/2-pokemons/PokeCenter.h
- chap-05/2-pokemons/Pokedex.h
- chap-05/2-pokemons/Pokemon.h
- chap-05/2-pokemons/ProfessorOak.h
- chap-05/2-pokemons/Trainer.h
La cible √† compiler est c5-2-pokemons.
 Le terme &amp;ldquo;propri√©t√©&amp;rdquo; est tout √† fait valide pour parler d&#39;&amp;ldquo;ownership&amp;rdquo;, mais nous utiliserons de pr√©f√©rence ce dernier, car &amp;ldquo;propri√©t√©&amp;rdquo; peut aussi √™tre utilis√© pour d√©signer les &amp;ldquo;attributs&amp;rdquo; d&amp;rsquo;un objet.
 Un probl√®me d&amp;rsquo;architecture Comme vous l&amp;rsquo;avez vu dans l&amp;rsquo;exercice pr√©c√©dent, afin de pouvoir lib√©rer une ressource, il faut d&amp;rsquo;abord pr√©venir tous les objets qui la r√©f√©rencent que celle-ci va √™tre d√©truite.</description>
    </item>
    
    <item>
      <title>Tableaux dynamiques</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/2-vectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/2-vectors/</guid>
      <description>Vous apprendrez ici √† utiliser des vector de mani√®re un peu plus avanc√©e : construction, acc√®s, insertions, suppressions et recherches n&amp;rsquo;auront plus de secrets pour vous !
 Pour cet exercice, vous modifierez le fichier :
- chap-03/1-vectors.cpp
La cible √† compiler est c3-1-vectors.
 Construction Au chapitre pr√©c√©dent, nous vous avions pr√©sent√© diff√©rentes syntaxes permettant d&amp;rsquo;instancier une classe. Nous vous avions en particulier indiquer qu&amp;rsquo;il √©tait possible d&amp;rsquo;utiliser la syntaxe Class c { p1, p2 }; ou bien la syntaxe Class c(p1, p2);.</description>
    </item>
    
    <item>
      <title>Template variadique</title>
      <link>https://laefy.github.io/CPP_Learning/chapter9/2-variadiac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter9/2-variadiac/</guid>
      <description>Un template variadique, c&amp;rsquo;est un template qui attend un nombre variable de param√®tres. Vous en avez d√©j√† utilis√© plusieurs, comme :
- la fonction-template emplace_back de std::vector, qui attend n&amp;rsquo;importe quels nombres et types d&amp;rsquo;arguments, et les utilisent pour construire le nouvel √©l√©ment,
- la fonction-template std::make_unique, qui fonctionne sur le m√™me principe,
- la classe-template std::tuple, qui permet de repr√©senter un N-uplet contenant n&amp;rsquo;importe quels types.
L&amp;rsquo;objectif de cette section sera de vous apprendre √† d√©finir vos propres templates variadiques.</description>
    </item>
    
    <item>
      <title>Transformations</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/2-transformations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter6/2-transformations/</guid>
      <description>Maintenant que nous vous avons pr√©sent√© les fonctions permettant de r√©cup√©rer des informations √† partir d&amp;rsquo;une plage d&amp;rsquo;√©l√©ments, nous allons vous pr√©senter celles qui permettent de manipuler et de transformer ces plages.
 Suppressions Afin de supprimer des √©l√©ments d&amp;rsquo;une plage, on utilise la fonction std::remove. Cette fonction a pour effet de d√©placer les √©l√©ments √† conserver au d√©but de la plage, en pr√©servant leur ordre. Elle renvoie un it√©rateur sur le nouvel it√©rateur de fin de plage.</description>
    </item>
    
    <item>
      <title>Visual Studio Code</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/2-vscode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/2-vscode/</guid>
      <description>Pour l&amp;rsquo;IDE, nous vous conseillons d&amp;rsquo;utiliser Visual Studio Code, car celui-ci est disponible sur toutes les plateformes (contrairement √† Visual Studio tout court), qu&amp;rsquo;il est tr√®s bien document√© et que vous pourrez trouvez de nombreux tutoriels en ligne pour apprendre √† l&amp;rsquo;utiliser.
Vous trouverez ci-dessous les instructions permettant d&amp;rsquo;installer VSCode.
 Windows  Installez VSCode en suivant les instructions du paragraphe Installation.
Si l&amp;rsquo;installeur vous propose d&amp;rsquo;installer git, vous pouvez acceptez, cela vous fera gagner du temps pour la suite.</description>
    </item>
    
    <item>
      <title>‚ú® Premi√®re classe</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/2-first-class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/2-first-class/</guid>
      <description>C&amp;rsquo;est parti pour la pratique ! Vous allez ici apprendre √† d√©finir une classe en C++ et √† l&amp;rsquo;instancier.
 Pour cet exercice, vous modifierez le fichier :
- chap-02/1-first_class.cpp
La cible √† compiler est c2-1-first_class.
 M√©thodologie Pour cet exercice, on vous fournit le code de la fonction main.
int main() { // Person p;  // p.set_name(&amp;#34;Batman&amp;#34;);  // p.set_age(23);  // std::cout &amp;lt;&amp;lt; &amp;#34;Person named &amp;#39;&amp;#34; &amp;lt;&amp;lt; p.</description>
    </item>
    
    <item>
      <title>üêÆ Concerto animalier</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/2-farm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter4/2-farm/</guid>
      <description>Vous allez maintenant apprendre √† d√©finir des classes permettant √† leurs enfants de sp√©cialiser leur comportement. On parle alors de classe polymorphe.
Nous ferons un petit r√©capitulatif en fin de page, pour rappelez les points essentiels auxquels il faut faire attention lorsque vous d√©finissez des classes polymorphes pour √©viter les bugs.
 Pour cet exercice, vous modifierez les fichiers :
- chap-04/2-farm/FarmHouse.cpp
- chap-04/2-farm/Animal.h
- chap-04/2-farm/Dog.h
- chap-04/2-farm/Cat.h
- chap-04/2-farm/Chicken.h</description>
    </item>
    
    <item>
      <title>ü¶ú Perroquet</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/3-practice/2-parrot.fd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/3-practice/2-parrot.fd/</guid>
      <description>Vous allez maintenant impl√©menter un perroquet, qui r√©p√®te ce que vous dites dans la console.
 Pour cet exercice, vous modifierez le fichier :
- chap-01/2-parrot.cpp
La cible √† compiler est c1-2-parrot.
 Lire un entier Commencez par √©crire une fonction main qui ne fait rien, comme dans l&amp;rsquo;exercice pr√©c√©dent. Compilez et ex√©cutez le programme, pour √™tre s√ªr que tout est bien configur√©.
Ensuite, vous allez d√©clarer une variable de type int.</description>
    </item>
    
    <item>
      <title>Autres conteneurs s√©quentiels</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/3-sequentials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/3-sequentials/</guid>
      <description>Vous allez maintenant manipuler les autres conteneurs s√©quentiels que la libraire propose.
 Pour cet exercice, vous modifierez le fichier :
- chap-03/2-sequentials.cpp
La cible √† compiler est c3-2-sequentials.
 Tableaux de taille fixe Pour cr√©er des tableaux de taille fixe, il est bien entendu possible d&amp;rsquo;utiliser les tableaux primitifs. L&amp;rsquo;inconv√©nient, c&amp;rsquo;est qu&amp;rsquo;il faut penser √† les initialiser, ce que tout le monde ne pense pas toujours √† faire&amp;hellip;.
Du coup, pour pallier √† ce probl√®me, il est possible d&amp;rsquo;utiliser la classe std::array.</description>
    </item>
    
    <item>
      <title>CMake</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/3-cmake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/3-cmake/</guid>
      <description>Afin de g√©n√©rer les art√©facts pour la compilation, nous utiliserons CMake.
 Installation Si vous √™tes sous Unix, vous devriez pouvoir installer CMake depuis votre gestionnaire de paquets.
Si vous √™tes sous Windows, vous pouvez utiliser l&amp;rsquo;installeur que vous trouverez sur cette page.
 Int√©gration √† VSCode Afin de pouvoir utiliser CMake facilement depuis VSCode, il faut installer les extensions CMake et CMakeTools.
 D√©marrez VSCode. Ouvrez le panneau des extensions et recherchez les extensions CMake et CMakeTools.</description>
    </item>
    
    <item>
      <title>D√©brief</title>
      <link>https://laefy.github.io/CPP_Learning/chapter8/3-syntaxe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter8/3-syntaxe/</guid>
      <description>D√©finition d&amp;rsquo;un template Pour d√©finir un template, il faut √©crire template &amp;lt;...&amp;gt; devant la d√©finition de la classe ou fonction templat√©e.
Les chevrons contiennent la liste des param√®tres du template. Chaque param√®tre est typ√© par :
- typename : il faut donc passer un nom de type en param√®tre,
- un type int√©gral, comme size_t, char, int, &amp;hellip; : il faut passer une expression du bon type √©valuable √† la compilation,</description>
    </item>
    
    <item>
      <title>It√©rateurs</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/3-iterators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter6/3-iterators/</guid>
      <description>Normalement, avec tout ce que vous avez vu jusqu&amp;rsquo;ici, vous devriez √™tre capable d&amp;rsquo;utiliser correctement un it√©rateur :
 d√©r√©f√©rencement avec *it incr√©mentation avec ++it r√©cup√©rer les it√©rateurs de d√©but et de fin d&amp;rsquo;un conteneur avec ctn.begin() et ctn.end() ins√©rer un √©l√©ment dans un conteneur avec auto it_on_new = ctn.insert(it, new_value) supprimer un √©l√©ment d&amp;rsquo;un conteneur avec auto it_on_next = ctn.erase(it)  Vous allez maintenant voir ce qu&amp;rsquo;il faut faire pour impl√©menter vos propres it√©rateurs.</description>
    </item>
    
    <item>
      <title>Pointeurs intelligents</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/3-smart-ptrs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter5/3-smart-ptrs/</guid>
      <description>Maintenant que vous savez ce √† quoi correspond l&amp;rsquo;ownership, nous allons vous pr√©sentez les smart pointers.
 Ownership simple Pour cet exercice, vous modifierez les fichiers :
- chap-05/2-pokemons/Journey.cpp
- chap-05/2-pokemons/PC.h
- chap-05/2-pokemons/PokeCenter.h
- chap-05/2-pokemons/Pokedex.h
- chap-05/2-pokemons/Pokemon.h
- chap-05/2-pokemons/ProfessorOak.h
- chap-05/2-pokemons/Trainer.h
La cible √† compiler est c5-2-pokemons.
 En g√©n√©ral, on peut s&amp;rsquo;arranger pour qu&amp;rsquo;√† tout instant de l&amp;rsquo;ex√©cution d&amp;rsquo;un programme, chacune des ressources ait un unique propri√©taire. C&amp;rsquo;√©tait par exemple le cas dans l&amp;rsquo;exercice pr√©c√©dent : un Pok√©mon pouvait changer de propri√©taire, certes, mais il ne pouvait pas avoir deux propri√©taires au m√™me moment.</description>
    </item>
    
    <item>
      <title>R√©solution d&#39;appel virtuel</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/3-virtual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter4/3-virtual/</guid>
      <description>Nous allons maintenant rentrer dans les d√©tails de ce qu&amp;rsquo;il se passe sous le manteau, lorsque le programme effectue un appel virtuel.
 Virtual table Lorsqu&amp;rsquo;une classe Parent contenant des fonctions virtuelles est compil√©e, le compilateur va g√©n√©rer pour l&amp;rsquo;ensemble des classes qui en d√©rivent une virtual table. Il s&amp;rsquo;agit d&amp;rsquo;une tableau qui contient, pour chaque fonction virtuelle de la classe, un pointeur sur la fonction qui sera vraiment appel√©e.</description>
    </item>
    
    <item>
      <title>Sp√©cialisations</title>
      <link>https://laefy.github.io/CPP_Learning/chapter9/3-specializations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter9/3-specializations/</guid>
      <description>Cette section sera consacr√©e √† la sp√©cialisation de templates de classe et de fonctions.
 // üößüö•üî® //</description>
    </item>
    
    <item>
      <title>üî¢ Tableau Num√©rique</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/3-practice/3-array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/3-practice/3-array/</guid>
      <description>Le but de cet exercice est de voir comment manipuler les tableaux en C++ et passer des arguments au programme. Votre objectif sera d&amp;rsquo;afficher un tableau de nombres, dont la taille sera d√©finie par les param√®tres pass√©s au programme.
 Pour cet exercice, vous modifierez le fichier :
- chap-01/3-array.cpp
La cible √† compiler est c1-3-array.
 Tableau statique Le code initial de l&amp;rsquo;exercice vous est fourni. Le voici :</description>
    </item>
    
    <item>
      <title>üî® Constructeur</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/3-constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/3-constructor/</guid>
      <description>Dans cet exercice, vous apprendrez √† param√©trer la construction de vos objets.
 Pour cet exercice, vous modifierez le fichier :
- chap-02/2-constructor.cpp
La cible √† compiler est c2-2-constructor.
 Constructeur √† param√®tres Reprenez le code de l&amp;rsquo;exercice pr√©c√©dent.
Vous aviez impl√©ment√© une fonction-membre set_name dans la classe Person pour initialiser l&amp;rsquo;attribut _name. Or, ce serait bien d&amp;rsquo;une part de r√©ellement pouvoir initialiser cet attribut plut√¥t que de le modifier apr√®s l&amp;rsquo;instanciation, et d&amp;rsquo;autre part, de supprimer ce setter, afin qu&amp;rsquo;une fois initialis√©, il ne soit plus possible de modifier _name.</description>
    </item>
    
    <item>
      <title>Conteneurs associatifs</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/4-associatives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/4-associatives/</guid>
      <description>Un conteneur associatif est un conteneur dans lequel les √©l√©ments peuvent √™tre index√©s par des objets, et non plus seulement par des entiers.
Vous allez donc ici voir les diff√©rents types de conteneurs associatifs propos√©s par la STL.
 Pour cet exercice, vous modifierez les fichiers :
- chap-03/3-associatives/main.cpp
- chap-03/3-associatives/keys.h
La cible √† compiler est c3-3-associatives.
 Les sets (ensembles) Un set est un conteneur dans lequel les √©l√©ments sont &amp;ldquo;index√©s par eux-m√™mes&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/4-git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/4-git/</guid>
      <description>Pour le gestionnaire de version, nous utiliserons git. Vous pourrez ensuite h√©berger votre d√©p√¥t pour les TPs et le projet sur la plateforme de votre choix (Github, Gitlab, Bitbucket, votre serveur perso, peu importe), du moment que l&amp;rsquo;on peut y avoir acc√®s pour l&amp;rsquo;√©valuation.
 Installation Si vous √™tes sous Unix, vous devriez pouvoir installer git depuis votre gestionnaire de paquets.
Si vous √™tes sous Windows, vous pouvez t√©l√©charger l&amp;rsquo;outil depuis cette page.</description>
    </item>
    
    <item>
      <title>Lambdas</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/4-lambdas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter6/4-lambdas/</guid>
      <description>Les lambdas sont des objets-fonction un peu sp√©ciaux, que l&amp;rsquo;on peut facilement d√©finir depuis le corps d&amp;rsquo;une fonction. Vous avez d√©j√† d√ª voir de nombreux exemples d&amp;rsquo;utilisation de lambda tout au long de ce cours. Nous allons maintenant revenir plus en d√©tail sur leur fonctionnement et vous montrez tout ce qu&amp;rsquo;il est possible de faire avec.
 Syntaxe La d√©finition d&amp;rsquo;une lambda est compos√©e en g√©n√©ral de trois parties :</description>
    </item>
    
    <item>
      <title>Polymorphisme</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/4-polymorphism/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter4/4-polymorphism/</guid>
      <description>Vous avez probablement d√©j√† entendu le terme polymorphisme, vous l&amp;rsquo;avez peut-√™tre m√™me d√©j√† utilis√©, mais quand vous y r√©fl√©chissez, si on vous demandait de le d√©finir clairement, vous ne sauriez pas forc√©ment quoi r√©pondre. Cette page sera donc l&amp;rsquo;occasion de revenir sur sa d√©finition.
Dans ce chapitre, nous nous sommes int√©ress√©s √† deux mani√®res de mettre-en-ouvre le polymorphisme en C++ : l&amp;rsquo;h√©ritage statique et l&amp;rsquo;h√©ritage dynamique. Nous d√©taillerons les diff√©rences entre les deux et dans quels cas utiliser l&amp;rsquo;un ou l&amp;rsquo;autre.</description>
    </item>
    
    <item>
      <title>R√©solution d&#39;appels</title>
      <link>https://laefy.github.io/CPP_Learning/chapter9/4-resolution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter9/4-resolution/</guid>
      <description>// üößüö•üî® //
 </description>
    </item>
    
    <item>
      <title>üß¨ Cl√¥ne</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/4-clone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/4-clone/</guid>
      <description>Dans cet exercice, vous verrez comment impl√©menter un constructeur de copie et un op√©rateur d&amp;rsquo;assignation.
Nous en profiterons aussi pour vous montrer comment surcharger l&amp;rsquo;op√©rateur &amp;lt;&amp;lt;.
 Pour cet exercice, vous modifierez le fichier :
- chap-02/3-clone.cpp
La cible √† compiler est c2-3-clone.
 Constructeur de copie Dans la fonction main, instanciez √† la suite du code existant une nouvelle instance de Person et initialis√©e l√† √† partir de la variable batman.</description>
    </item>
    
    <item>
      <title>üßÆ Calculette</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/3-practice/4-calculator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/3-practice/4-calculator/</guid>
      <description>Dans cet exercice, vous refactoriserez le code d&amp;rsquo;une mini-calculette. Cela sera l&amp;rsquo;occasion de voir l&amp;rsquo;instruction switch, les fonctions et le passage de param√®tres par r√©f√©rence.
 Pour cet exercice, vous modifierez le fichier :
- chap-01/4-calculator.cpp
La cible √† compiler est c1-4-calculator.
 Comprendre le code existant Commen√ßons par parcourir le code fourni, afin de comprendre ce qu&amp;rsquo;il s&amp;rsquo;y passe.
int main(int argc, char** argv) { // Parsing program parameters.  some code.</description>
    </item>
    
    <item>
      <title>Astuces</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/5-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/5-tips/</guid>
      <description>Compiler un petit programme dans un terminal Avec g++ :
g++f1.cpp f2.cpp f3.cpp -o program Avec clang :
clang++f1.cpp f2.cpp f3.cpp -o program Vous pouvez ajouter des options de compilation (voir ci-dessous) √† la fin de la ligne de commande.
 Options de compilation Voici les options de compilation que nous vous conseillons d&amp;rsquo;utiliser pendant le cours, et que l&amp;rsquo;on activera pour compiler vos rendus de TPs :
 -std=c++17 : sp√©cifie que le projet sera compil√© en C++17 -Wall -W : permet d&amp;rsquo;activer un certain nombre de warnings -Werror : transforme les warnings en erreurs, donc tant qu&amp;rsquo;il y a des warnings, le programme ne compile pas  Vous pouvez √©galement utiliser :</description>
    </item>
    
    <item>
      <title>Manipulation de cha√Ænes</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/5-strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/5-strings/</guid>
      <description>Dans cette partie, nous reviendrons sur les fonctions fournies par la librairie permettant de manipuler des string. Vous apprendrez aussi ce que sont les string_view et √† quoi elles servent.
 Pour cet exercice, vous modifierez le fichier :
- chap-03/4-strings.cpp
La cible √† compiler est c3-4-strings.
 Op√©rations standards Parmis les op√©rations standards que l&amp;rsquo;on peut effectuer sur des cha√Ænes de caract√®re, on retrouve :
 la concat√©nation, l&amp;rsquo;extration de sous-cha√Æne, la recherche de caract√®re ou de sous-cha√Æne, la comparaison, le remplacement d&amp;rsquo;une partie de la cha√Æne.</description>
    </item>
    
    <item>
      <title>SFINAE</title>
      <link>https://laefy.github.io/CPP_Learning/chapter9/5-sfinae/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter9/5-sfinae/</guid>
      <description>En cours d&amp;rsquo;√©criture&amp;hellip;
 </description>
    </item>
    
    <item>
      <title>üî≥ Rectangle</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/5-rectangle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/5-rectangle/</guid>
      <description>Cet exercice vous permettra de d√©couvrir :
 comment √©crire des headers en C++, comment extraire l&amp;rsquo;impl√©mentation des fonctions d&amp;rsquo;une classe en dehors de cette classe, √† quoi correspondent les membres statiques d&amp;rsquo;une classe et comment les d√©finir, comment d√©l√©guer un appel √† un autre constructeur.   Pour cet exercice, vous modifierez les fichiers :
- chap-02/4-rectangle/main.cpp
- chap-02/4-rectangle/Rectangle.cpp
- chap-02/4-rectangle/Rectangle.h
La cible √† compiler est c2-4-rectangle.
 Header en C++ Vous commencez l&amp;rsquo;exercice avec une fonction main dans le fichier main.</description>
    </item>
    
    <item>
      <title>üöó V√©hicule partag√©</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/5-vehicles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter4/5-vehicles/</guid>
      <description>Pour terminer ce chapitre, nous allons voir comment faire pour acc√©der directement aux attributs de votre classe de base, comment appeler la fonction parent depuis la r√©d√©finition de cette fonction dans la classe-fille et enfin, comment mod√©liser des classes abstraites.
 Pour cet exercice, vous modifierez les fichiers :
- chap-04/3-vehicles/Program.cpp
- chap-04/3-vehicles/Vehicle.h
- chap-04/3-vehicles/Car.h
- chap-04/3-vehicles/Scooter.h
La cible √† compiler est c4-3-vehicles.
 Introduction du permis Dans le programme que l&amp;rsquo;on vous fournit, n&amp;rsquo;importe qui peut conduire n&amp;rsquo;importe quoi.</description>
    </item>
    
    <item>
      <title>Paires et tuples</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/6-tuples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/6-tuples/</guid>
      <description>Vous avez d√©j√† utilis√© le type pair au cours d&amp;rsquo;exercices pr√©c√©dents. Nous allons maintenant vous pr√©senter son cousin, la classe tuple.
 Pour cet exercice, vous modifierez le fichier :
- chap-03/5-tuples.cpp
La cible √† compiler est c3-5-tuples.
 Micro rappel sur les pair La classe pair est un type templat√© avec deux param√®tres :
std::pair&amp;lt;int, float&amp;gt; such_a_nice_pair { 1, 3.f }; On acc√®de aux √©l√©ments de la pair directement via ses attributs first et second (pas de getters) :</description>
    </item>
    
    <item>
      <title>üí† Polyg√¥ne</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/6-polygon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/6-polygon/</guid>
      <description>Dans cet exercice, vous impl√©menterez votre premier destructeur. Vous y d√©couvrirez aussi la notion d&amp;rsquo;alias et le m√©canisme d&amp;rsquo;amiti√©.
Pour terminer, vous serez confront√© √† votre premi√®re &amp;ldquo;dangling reference&amp;rdquo;.
 Pour cet exercice, vous modifierez les fichiers :
- chap-02/5-polygon/main.cpp
- chap-02/CMakeLists.txt
Et vous ajouterez les fichiers :
- chap-02/5-polygon/Polygon.h
- chap-02/5-polygon/Polygon.cpp
La cible √† compiler est c2-5-polygon.
 Pr√©sentation de l&amp;rsquo;exercice Pour cet exercice, vous utiliserez la m√™me m√©thodologie que pour l&amp;rsquo;exercice first-class :</description>
    </item>
    
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/test/</guid>
      <description>F√©licitations !! Vous avez enfin termin√© le Chapitre 1 ! Vous aviez l&amp;rsquo;impression qu&amp;rsquo;il n&amp;rsquo;en finirait jamais, qu&amp;rsquo;il aspirerait votre √¢me dans des m√©andres t√©n√©breux, mais c&amp;rsquo;est bon, vous l&amp;rsquo;avez terrass√© ü•≥üéâ
 Avant de nous quitter pour aller savourer ce moment, vous devriez profiter que le chapitre soit bien frais dans votre t√™te pour r√©pondre au questionnaire ci-dessous. Nous vous rappelons que si vous √™tes en M1 √† l&amp;rsquo;UGE, il participera √† votre notation.</description>
    </item>
    
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/test/</guid>
      <description>Vous pensiez que le Chapitre 2 serait plus l√©ger que le Chapitre 1 ? D√©sol√©e de vous avoir d√©√ßus üòÖ
Mais bon, vous l&amp;rsquo;avez enfin termin√©, donc vous pouvez √™tre fiers de vous ! üòÄ
 Avant de nous quitter pour aller savourer ce moment, vous devriez profiter que le chapitre soit bien frais dans votre t√™te pour r√©pondre au questionnaire ci-dessous. Nous vous rappelons que si vous √™tes en M1 √† l&amp;rsquo;UGE, il participera √† votre notation.</description>
    </item>
    
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/test/</guid>
      <description>Le premier objectif de ce chapitre √©tait de vous pr√©senter quelques classes de la STL, leurs r√¥les, leurs diff√©rences, dans quelles situations les utiliser et comment.
Il avait √©galement un deuxi√®me objectif, qui √©tait en quelque sorte de vous apprendre √† vous d√©brouiller tout seul : vous devriez d√©sormais √™tre capable de rechercher par vous-m√™me des informations dans la documentation, et vous devriez aussi appr√©hender un peu mieux qu&amp;rsquo;avant les messages du compilateur.</description>
    </item>
    
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter4/test/</guid>
      <description>Vous avez termin√© le Chapitre 4 ! C&amp;rsquo;est donc maintenant le moment de connecter vos neurones pour r√©pondre aux questions suivantes.
Bon courage √† vous üôÇ
 Vous √™tes : Votre adresse mail : 1- Qu‚Äôest-ce qu‚Äôune classe polymorphe ?

2- D√©finissez une classe polymorphe Nothing qui ne fait rien.

3- Comment repr√©senter une classe abstraite en C++ ?

 Les questions 4 √† 6 font r√©f√©rence au code suivant :</description>
    </item>
    
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter5/test/</guid>
      <description>C&amp;rsquo;est l&amp;rsquo;heure du test ! Bon courage üôÇ
 Vous √™tes : Votre adresse mail : 1- Quel est la responsabilit√© du propri√©taire d‚Äôune ressource ?

2- Quelles sont les deux raisons pour lesquelles il faut utiliser des smart pointers plut√¥t que des raw pointers lorsqu‚Äôon veut exprimer la notion d‚Äôownership ?

3- Quels sont les trois smart pointers propos√©s par la STL ? A quoi sert chacun d‚Äôentre eux ?</description>
    </item>
    
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter6/test/</guid>
      <description>C&amp;rsquo;est l&amp;rsquo;heure du test ! N&amp;rsquo;oubliez pas que vous pouvez utiliser Godbolt pour compiler et tester des petits bouts de code.
Bon courage √† vous üôÇ
 Vous √™tes : Votre adresse mail : 1- Quel type de boucle faut-il utiliser pour modifier la structure d‚Äôun conteneur lors d‚Äôun parcours ?

2- Dans quel cas peut-il √™tre int√©ressant d‚Äôutiliser la fonction std::for_each ?

 3- Quels headers contiennent les algorithmes de la STL ?</description>
    </item>
    
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter7/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter7/test/</guid>
      <description>C&amp;rsquo;est l&amp;rsquo;heure du test ! N&amp;rsquo;oubliez pas que vous pouvez utiliser Godbolt pour compiler et tester des petits bouts de code.
Bon courage √† vous üôÇ
 Vous √™tes : Votre adresse mail : 1- A quoi sert une assertion ?

2- Pourquoi ne faut-il pas utiliser d‚Äôassertions pour traiter une erreur d‚Äôutilisation d‚Äôun logiciel ?

3- Ecrivez une assertion permettant de s‚Äôassurer qu‚Äôune variable name de type std::string n‚Äôest pas vide.</description>
    </item>
    
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter8/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter8/test/</guid>
      <description>C&amp;rsquo;est l&amp;rsquo;heure du test ! N&amp;rsquo;oubliez pas que vous pouvez utiliser Godbolt pour compiler et tester des petits bouts de code.
Bon courage √† vous üôÇ
 Vous √™tes : Votre adresse mail : 1- Que faut-il √©crire juste avant la d√©finition d‚Äôune classe (ou fonction) pour en faire une classe (ou fonction) templat√©e ?

2- Pourquoi n‚Äôest-il pas toujours possible de placer l‚Äôimpl√©mentation des fonctions-membres d‚Äôune classe-template dans un .</description>
    </item>
    
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter9/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter9/test/</guid>
      <description>Ce questionnaire sera mis en ligne dans les tous prochains jours, et il sera √† rendre le 11 avril au soir.
N&amp;rsquo;h√©sitez n√©anmoins pas √† utiliser le formulaire d&amp;rsquo;ici l√† pour envoyer vos questions.
 Vous √™tes : Votre adresse mail : Combien de temps avez-vous mis √† compl√©ter ce chapitre ?Avez-vous des questions suite √† sa lecture ?Avez-vous des commentaires concernant le chapitre et/ou le site ?</description>
    </item>
    
    <item>
      <title>Retours ?</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/test/</guid>
      <description>Si vous avez rencontr√© des probl√®mes lors de l&amp;rsquo;installation d&amp;rsquo;un des logiciels, n&amp;rsquo;h√©sitez pas √† nous l&amp;rsquo;indiquer, afin que nous puissions am√©liorer nos explications. Merci d&amp;rsquo;avance ! üôÇ
 Vous √™tes : Votre adresse mail : 1- Avez-vous rencontrer des difficult√©s lors de l‚Äôinstallation d‚Äôun des composants ? Si oui, du ou desquels s‚Äôagit-il ?

2- Si une erreur est survenue √† un moment, pouvez-vous la copier-coller ci-dessous, et indiquer √† quel moment celle-ci a eu lieu ?</description>
    </item>
    
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/summary/</guid>
      <description>Ce qu&amp;rsquo;il faut retenir Th√©orie  C++ est un langage compil√©, performant, document√©, standardis√© et disposant d&amp;rsquo;une large communaut√©. Il est verbeux et sa syntaxe font qu&amp;rsquo;il ne s&amp;rsquo;agit pas du langage le plus agr√©able √† lire. Une r√©f√©rence est une variable qui pointe sur la m√™me zone de m√©moire qu&amp;rsquo;une autre variable.  M√©thodologie  Lorsqu&amp;rsquo;on a besoin d&amp;rsquo;une fonction, on commence par aller voir sur Internet si elle n&amp;rsquo;existe pas d√©j√† dans la librairie standard.</description>
    </item>
    
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/summary/</guid>
      <description>Ce qu&amp;rsquo;il faut retenir Th√©orie  A quoi correspondent les termes attributs et fonction-membres constructeur = fonction appel√©e √† l&amp;rsquo;instanciation d&amp;rsquo;une classe constructeur par d√©faut = constructeur √† 0 param√®tre impl√©mentation par d√©faut = impl√©mentation d&amp;rsquo;une fonction g√©n√©r√©e par le compilateur dans certaines conditions op√©rateur d&amp;rsquo;assignation = fonction appel√©e lorsque l&amp;rsquo;on √©crit a = ...;, sachant que a a √©t√© instanci√© plus t√¥t destructeur = fonction appel√©e √† la destruction d&amp;rsquo;un objet surcharge = fonction de m√™me nom, acceptant un nombre diff√©rent de param√®tres et/ou des param√®tres de types diff√©rents Lorsque la variable r√©f√©renc√©e par une r√©f√©rence est d√©truite, on a une dangling reference  Pratique  Utiliser this pour faire r√©f√©rence √† l&amp;rsquo;instance courante Comparer this et &amp;amp;other au d√©but de l&amp;rsquo;op√©rateur d&amp;rsquo;assignation Utiliser const aussi souvent que possible   Ce qu&amp;rsquo;il faut savoir faire Langage  D√©finir une classe : class A {}; (sans oublier le point-virgule) D√©finir des attributs et des fonctions-membres Indiquer la visibilit√© d&amp;rsquo;un ou plusieurs membres : public: - private: D√©finir un constructeur : ClassName(int p1, char p2) : _a1 { p1 }, _a2 { p2 } { } D√©l√©guer la construction √† un autre constructeur : ClassName(int p) : ClassName { p, p } {} D√©finir un constructeur de copie : ClassName(const ClassName&amp;amp; other) : _a1 { other.</description>
    </item>
    
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/summary/</guid>
      <description>Ce qu&amp;rsquo;il faut retenir Th√©orie  Un conteneur s√©quentiel est un conteneur dans lequel les √©lements se suivent (tableaux, listes, &amp;hellip;). Un conteneur associatif est un conteneur dans lequel chaque √©l√©ment est index√© par une clef (l&amp;rsquo;√©l√©ment pouvant √™tre la clef elle-m√™me). Les types pass√©s en param√®tre de template doivent parfois respecter des contraintes pour compiler (ces contraintes sont sp√©cifi√©es dans la documentation).  Librairie standard  Tableau de taille dynamique : vector Tableau de taille fixe : array Listes cha√Æn√©es : list ou forward_list Ensembles : set ou unordered_set Dictionnaires : map ou unordered_map  Pratique  On peut passer les cha√Ænes de caract√®res constantes par std::string_view plut√¥t que const std::string&amp;amp; ou const char*.</description>
    </item>
    
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter4/summary/</guid>
      <description>Ce qu&amp;rsquo;il faut savoir faire Langage  D√©finir une relation de parent√© publique entre deux classes : class Child : public Parent { ... }; D√©finir un membre (fonction ou attribut) accessible uniquement depuis la classe courante et ses enfants : protected : int _a1 = 0; char _a2 = &#39;a&#39;; Appeler le constructeur de la classe parent : Child(int p1, int p2) : Parent { p1 }, _p2 { p2 } { .</description>
    </item>
    
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter5/summary/</guid>
      <description>Ce qu&amp;rsquo;il faut retenir Th√©orie  Une ressource est g√©n√©ralement une entit√© que l&amp;rsquo;on demande √† l&amp;rsquo;OS de nous &amp;ldquo;pr√™ter&amp;rdquo;, comme un bloc de m√©moire, un fichier ou encore une connection r√©seau.
Certains objets du programme peuvent √©galement √™tre consid√©r√©s comme des ressources. Une ressource est valide de son acquisition √† sa lib√©ration. La dur√©e de vie d&amp;rsquo;une ressource fait r√©f√©rence est cette p√©riode de validit√©. RAII : technique qui consiste √† s&amp;rsquo;assurer qu&amp;rsquo;une ressource sera bien lib√©r√©e, en l&amp;rsquo;associant √† un objet (smart pointer, conteneur STL, &amp;hellip;).</description>
    </item>
    
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter6/summary/</guid>
      <description>// üößüö•üî® //</description>
    </item>
    
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter7/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter7/summary/</guid>
      <description>// üößüö•üî® //</description>
    </item>
    
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter8/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter8/summary/</guid>
      <description>// üößüö•üî® //</description>
    </item>
    
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter9/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter9/summary/</guid>
      <description>// üößüö•üî® //</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://laefy.github.io/CPP_Learning/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/faq/</guid>
      <description>Pourquoi je n&amp;rsquo;arrive pas √† lancer mon projet avec CMake ? Cela peut-√™tre d√ª √† plusieurs raisons :
1. Vous n&amp;rsquo;avez pas ouvert le bon dossier dans VSCode. Il faut toujours ouvrir le dossier qui contient tous les chapitres et tous les TPs, pas le dossier d&amp;rsquo;un chapitre ou d&amp;rsquo;un TP en particulier.
2. Vous avez essay√© de lancer le programme via le menu Run de VSCode. Si vous tentez de lancer un programme de cette mani√®re, VSCode va g√©n√©rer un fichier launch.</description>
    </item>
    
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/test_done/</guid>
      <description>Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ Retourner √† la synth√®se du Chapitre</description>
    </item>
    
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/test_done/</guid>
      <description>Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ Retourner √† la synth√®se du Chapitre</description>
    </item>
    
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/test_done/</guid>
      <description>Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ Retourner √† la synth√®se du Chapitre</description>
    </item>
    
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/test_done/</guid>
      <description>Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ Retourner √† la synth√®se du Chapitre</description>
    </item>
    
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter4/test_done/</guid>
      <description>Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ Retourner √† la synth√®se du Chapitre</description>
    </item>
    
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter5/test_done/</guid>
      <description>Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ Retourner √† la synth√®se du Chapitre</description>
    </item>
    
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter6/test_done/</guid>
      <description>Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ Retourner √† la synth√®se du Chapitre</description>
    </item>
    
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter7/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter7/test_done/</guid>
      <description>Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ Retourner √† la synth√®se du Chapitre</description>
    </item>
    
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter8/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter8/test_done/</guid>
      <description>Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ Retourner √† la synth√®se du Chapitre</description>
    </item>
    
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter9/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter9/test_done/</guid>
      <description>Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ Retourner √† la synth√®se du Chapitre</description>
    </item>
    
    <item>
      <title>Workflow</title>
      <link>https://laefy.github.io/CPP_Learning/workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/workflow/</guid>
      <description>Afin de pouvoir mettre en place votre environnement de travail rapidement, vous pouvez suivre les √©tapes ci-dessous.
 R√©cup√©rer le d√©p√¥t Git du cours et des TPs   Forkez le d√©p√¥t https://github.com/Laefy/CPP_Learning_Code/.   Ouvrez une nouvelle fen√™tre dans VSCode et cliquez sur &amp;ldquo;clone repository&amp;hellip;&amp;rdquo;   Copiez le lien de votre d√©p√¥t cr√©√© par le fork.   Collez ce lien dans la fen√™tre de VSCode et s√©lectionnez &amp;ldquo;Clone from URL&amp;rdquo;.</description>
    </item>
    
  </channel>
</rss>
