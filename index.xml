<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Accueil on Cours de C&#43;&#43; - Niveau Master</title>
    <link>https://laefy.github.io/CPP_Learning/</link>
    <description>Recent content in Accueil on Cours de C&#43;&#43; - Niveau Master</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://laefy.github.io/CPP_Learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#39;est quoi un objet d√©j√† ?</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/1-poo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/1-poo/</guid>
      <description>Commen√ßons par donner quelques rappels des notions de POO que vous avez pu voir l&amp;rsquo;an dernier.
 Objet Dans un programme, un objet est un √©l√©ment constitu√© d&amp;rsquo;un √©tat, et disposant d&amp;rsquo;une interface permettant d&amp;rsquo;int√©ragir avec cet √©tat.
Classe Un objet est g√©n√©ralement cr√©√© √† partir d&amp;rsquo;un mod√®le, que l&amp;rsquo;on appelle classe. Un objet cr√©√© √† partir d&amp;rsquo;une classe constitue une instance de cette classe.
Etat L&amp;rsquo;√©tat d&amp;rsquo;un objet est compos√© de valeurs, pouvant ou non varier au cours de l&amp;rsquo;ex√©cution du programme.</description>
    </item>
    
    <item>
      <title>Compilateur</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/1-compiler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/1-compiler/</guid>
      <description>Pour le compilateur, vous devrez utiliser g++ (version &amp;gt;= 9) si vous √™tes sous Windows ou Linux, et clang si vous √™tes sous MacOS.
 Windows  Ouvrez un terminal et ex√©cutez g++ -v. Si la commande r√©ussit, assurez-vous que la derni√®re ligne indique bien une version de gcc &amp;gt;= 9. Si ce n&amp;rsquo;est pas le cas, installez le gestionnaire de paquet MSYS2 en suivant les instructions sur cette page.</description>
    </item>
    
    <item>
      <title>Dur√©e de vie</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/1-lifespan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/1-lifespan/</guid>
      <description>Port√©e d&amp;rsquo;une variable locale Afin de parler de dur√©e de vie, nous allons commencer par parler de la port√©e de nos variables. Comme vous le savez peut-√™tre, la port√©e d&amp;rsquo;une variable d√©finit la portion de code dans laquelle le compilateur nous permet de l&amp;rsquo;utiliser.
Si on d√©finit une variable dans une fonction, la port√©e de celle-ci d√©marre √† sa d√©finition et se termine √† la fin du bloc dans lequel celle-ci a √©t√© d√©finie.</description>
    </item>
    
    <item>
      <title>Petits programmes</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/6-tips/1-snippets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/6-tips/1-snippets/</guid>
      <description>Voici 2 solutions permettant de compiler et de tester rapidement des petits programme.
 Compiler Explorer Vous pouvez utiliser Compiler Explorer pour compiler du code avec √† peu pr√®s tous les compilateurs de la Terre.
Cet utilitaire vous permet √©galement d&amp;rsquo;ex√©cuter directement votre programme.
 Depuis un terminal Pour compiler Avec g++ :
g++f1.cpp f2.cpp f3.cpp -o program Avec clang :
clang++f1.cpp f2.cpp f3.cpp -o program Vous pouvez ajouter des options de compilation √† la fin de la ligne de commande.</description>
    </item>
    
    <item>
      <title>Projets VSCode</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/6-tips/2-vscode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/6-tips/2-vscode/</guid>
      <description>Lorsque vous avez un projet un peu plus cons√©quent, il est plus pratique de passer par VSCode pour configurer, compiler et tester vos programmes.
 Configuration avec CMake Vous aurez besoin d&amp;rsquo;un fichier CMakeLists.txt √† la racine de votre r√©pertoire pour configurer le projet. Si celui-ci ne contient qu&amp;rsquo;un seul programme, vous pouvez copier et adapter dans votre CMakeLists.txt les instructions suivantes.
cmake_minimum_required(VERSION 3.1)project(my_project)add_executable(my_executablemy_file1.cppmy_file2.cppmy_file3.h)target_compile_features(my_executable PUBLIC cxx_std_17)Pour configurer le projet, utilisez la commande CMake: Configure.</description>
    </item>
    
    <item>
      <title>Pr√©sentation du langage</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/1-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/1-language/</guid>
      <description>Cette page vous pr√©sentera quelques caract√©ristiques du C++, les diff√©rences avec d&amp;rsquo;autres langages que vous avez √©tudi√©s jusque l√†, pourquoi est-ce que certains disent que C++ est compliqu√©, alors que pas forc√©ment, et ce qui fait que le langage est aussi utilis√© aujourd&amp;rsquo;hui. Promis, c&amp;rsquo;est la seule page du cours o√π vous trouverez autant de pav√©s üôÇ
 Quelques caract√©ristiques C++ est un langage de programmation informatique invent√© dans les ann√©es 1980 par un informaticien nomm√© Bjarne Stroupstrup.</description>
    </item>
    
    <item>
      <title>Raccourcis &amp; Commandes</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/6-tips/3-keybinds-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/6-tips/3-keybinds-commands/</guid>
      <description>G√©n√©ral Ouvrir le panneau de commandes VSCode :
Ctrl+Shift+P
 Configuration, Compilation, Ex√©cution Configurer le projet :
CMake: Configure
Compiler un programme :
Shift+F7 ou CMake: Build Target
Changer le programme √† ex√©cuter :
CMake: Set Debug Target
Lancer le programme :
F5 ou Debug: Start Debugging
 Debugging Placer un breakpoint √† la ligne du curseur :
F9
Reprendre l&amp;rsquo;ex√©cution :
F5
Ex√©cuter l&amp;rsquo;instruction suivante :
F10
Entrer dans la fonction :</description>
    </item>
    
    <item>
      <title>üëã Hello World</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/2-practice/1-hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/2-practice/1-hello-world/</guid>
      <description>Pour votre premier programme, on ne va pas trop faire dans l&amp;rsquo;originalit√©, il s&amp;rsquo;agira d&amp;rsquo;un Hello World. Vous l&amp;rsquo;avez d&amp;rsquo;ailleurs d√©j√† probablement vu dans la rubrique pr√©c√©dente, pour tester vos outils.
 Pour cet exercice, vous modifierez le fichier :
- chap-01/1-hello_world.cpp
La cible √† compiler est c1-1-hello_world.
 La fonction main Tout d&amp;rsquo;abord, commen√ßons par √©crire la fonction qui est appel√©e lorsqu&amp;rsquo;on lance le programme. On parle de point d&amp;rsquo;entr√©e.</description>
    </item>
    
    <item>
      <title>Ownership</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/2-ownership/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/2-ownership/</guid>
      <description>Ownership On dit qu&amp;rsquo;un objet A est le propri√©taire, ou le owner, d&amp;rsquo;un objet B lorsque la destruction de A entra√Æne la destruction de B.
Dans l&amp;rsquo;exercice pr√©c√©dent, on peut donc dire que box √©tait propri√©taire de box._content.
Consid√©rons un autre exemple :
std::vector&amp;lt;Box&amp;gt; boxes; boxes.emplace_back(&amp;#34;gift1&amp;#34;); Box&amp;amp; gift2 = boxes.emplace_back(&amp;#34;gift2&amp;#34;); Box gift3 = boxes.emplace_back(&amp;#34;gift3&amp;#34;); Ici, le tableau boxes est le propri√©taire des objets boxes[0], boxes[1] et boxes[2]. Il est √©galement propri√©taire de l&amp;rsquo;objet gift2, puisqu&amp;rsquo;il s&amp;rsquo;agit d&amp;rsquo;une r√©f√©rence sur boxes[1].</description>
    </item>
    
    <item>
      <title>Visual Studio Code</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/2-vscode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/2-vscode/</guid>
      <description>Pour l&amp;rsquo;IDE, nous vous conseillons d&amp;rsquo;utiliser Visual Studio Code, car celui-ci est disponible sur toutes les plateformes (contrairement √† Visual Studio tout court), qu&amp;rsquo;il est tr√®s bien document√© et que vous pourrez trouvez de nombreux tutoriels en ligne pour apprendre √† l&amp;rsquo;utiliser.
Vous trouverez ci-dessous les instructions permettant d&amp;rsquo;installer VSCode.
 Windows  Installez VSCode en suivant les instructions du paragraphe Installation.
Si l&amp;rsquo;installeur vous propose d&amp;rsquo;installer git, vous pouvez acceptez, cela vous fera gagner du temps pour la suite.</description>
    </item>
    
    <item>
      <title>‚ú® Premi√®re classe</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/2-first-class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/2-first-class/</guid>
      <description>C&amp;rsquo;est parti pour la pratique ! Vous allez ici apprendre √† d√©finir une classe en C++ et √† l&amp;rsquo;instancier.
 Pour cet exercice, vous modifierez le fichier :
- chap-02/1-first_class.cpp
La cible √† compiler est c2-1-first_class.
 M√©thodologie Pour cet exercice, on vous fournit le code de la fonction main.
int main() { // Person p;  // p.set_name(&amp;#34;Batman&amp;#34;);  // p.set_age(23);  // std::cout &amp;lt;&amp;lt; &amp;#34;Person named &amp;#39;&amp;#34; &amp;lt;&amp;lt; p.</description>
    </item>
    
    <item>
      <title>ü¶ú Perroquet</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/2-practice/2-parrot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/2-practice/2-parrot/</guid>
      <description>Vous allez maintenant impl√©menter un perroquet, qui r√©p√®te ce que vous dites dans la console.
 Pour cet exercice, vous modifierez le fichier :
- chap-01/2-parrot.cpp
La cible √† compiler est c1-2-parrot.
 Lire un entier Commencez par √©crire une fonction main qui ne fait rien, comme dans l&amp;rsquo;exercice pr√©c√©dent. Compilez et ex√©cutez le programme, pour √™tre s√ªr que tout est bien configur√©.
Ensuite, vous allez d√©clarer une variable de type int.</description>
    </item>
    
    <item>
      <title>Allocation dynamique</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/3-allocation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/3-allocation/</guid>
      <description>Nous allons maintenant voir comment il est possible d&amp;rsquo;allouer de la m√©moire simplement, en particulier sans avoir √† se soucier des fuites m√©moire.
 Allocation d&amp;rsquo;une primitive Pour cr√©er un objet sur le tas, nous allons nous servir d&amp;rsquo;un petit utilitaire appel√© std::unique_ptr et de la fonction std::make_unique. Ces deux symboles se trouvent dans le header &amp;lt;memory&amp;gt;.
Voici la syntaxe permettant d&amp;rsquo;allouer de la m√©moire pour un entier :
#include &amp;lt;iostream&amp;gt;#include &amp;lt;memory&amp;gt; void fcn() { std::unique_ptr&amp;lt;int&amp;gt; int_on_heap = std::make_unique&amp;lt;int&amp;gt;(3); std::cout &amp;lt;&amp;lt; *int_on_heap &amp;lt;&amp;lt; std::endl; // affiche 3  *int_on_heap = 5; std::cout &amp;lt;&amp;lt; *int_on_heap &amp;lt;&amp;lt; std::endl; // affiche 5 } La classe unique_ptr est donc un symbole que l&amp;rsquo;on template par le type qu&amp;rsquo;il doit contenir.</description>
    </item>
    
    <item>
      <title>CMake</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/3-cmake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/3-cmake/</guid>
      <description>Afin de g√©n√©rer les art√©facts pour la compilation, nous utiliserons CMake.
 Installation Si vous √™tes sous Unix, vous devriez pouvoir installer CMake depuis votre gestionnaire de paquets.
Si vous √™tes sous Windows, vous pouvez utiliser l&amp;rsquo;installeur que vous trouverez sur cette page. Notez √©galement l&amp;rsquo;emplacement o√π celui-ci a √©t√© install√©, car vous en aurez besoin √† l&amp;rsquo;√©tape suivante.
 Int√©gration √† VSCode Afin de pouvoir utiliser CMake facilement depuis VSCode, il faut installer les extensions CMake et CMakeTools.</description>
    </item>
    
    <item>
      <title>üî¢ Tableau Num√©rique</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/2-practice/3-array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/2-practice/3-array/</guid>
      <description>Le but de cet exercice est de voir comment manipuler les tableaux en C++ et passer des arguments au programme. Votre objectif sera d&amp;rsquo;afficher un tableau de nombres, dont la taille sera d√©finie par les param√®tres pass√©s au programme.
 Pour cet exercice, vous modifierez le fichier :
- chap-01/3-array.cpp
La cible √† compiler est c1-3-array.
 Tableau statique Le code initial de l&amp;rsquo;exercice vous est fourni. Le voici :</description>
    </item>
    
    <item>
      <title>üî® Constructeur</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/3-constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/3-constructor/</guid>
      <description>Dans cet exercice, vous apprendrez √† param√©trer la construction de vos objets.
 Pour cet exercice, vous modifierez le fichier :
- chap-02/2-constructor.cpp
La cible √† compiler est c2-2-constructor.
 Constructeur √† param√®tres Reprenez le code de l&amp;rsquo;exercice pr√©c√©dent.
Vous aviez impl√©ment√© une fonction-membre set_name dans la classe Person pour initialiser l&amp;rsquo;attribut _name. Or, ce serait bien d&amp;rsquo;une part de r√©ellement pouvoir initialiser cet attribut plut√¥t que de le modifier apr√®s l&amp;rsquo;instanciation, et d&amp;rsquo;autre part, de supprimer ce setter, afin qu&amp;rsquo;une fois initialis√©, il ne soit plus possible de modifier _name.</description>
    </item>
    
    <item>
      <title>D√©placement</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/4-move-sem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/4-move-sem/</guid>
      <description>Nous avons vu pr√©c√©dement que les unique_ptr ne pouvaient pas √™tre copi√©s. Cependant, le vector a r√©ussi √† provoquer leur &amp;ldquo;d√©placement&amp;rdquo; en m√©moire pour effectuer sa r√©allocation.
Nous allons voir comment faire de m√™me afin de pouvoir manipuler les unique_ptr avec un peu plus de souplesse.
 Construction sur place Lorsqu&amp;rsquo;une fonction retourne un objet et que celui-ci est utilis√© pour initialiser une variable, aucune copie n&amp;rsquo;a lieu. L&amp;rsquo;objet est directement construit √† l&amp;rsquo;adresse m√©moire qui lui √©tait r√©serv√©e dans le code appelant.</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/4-git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/4-git/</guid>
      <description>Pour le gestionnaire de version, nous utiliserons git. Vous pourrez ensuite h√©berger votre d√©p√¥t pour les TPs et le projet sur la plateforme de votre choix (Github, Gitlab, Bitbucket, votre serveur perso, peu importe), du moment que l&amp;rsquo;on peut y avoir acc√®s pour l&amp;rsquo;√©valuation.
 Installation Si vous √™tes sous Unix, vous devriez pouvoir installer git depuis votre gestionnaire de paquets.
Si vous √™tes sous Windows, vous pouvez t√©l√©charger l&amp;rsquo;outil depuis cette page.</description>
    </item>
    
    <item>
      <title>Options de compilation</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/6-tips/4-options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/6-tips/4-options/</guid>
      <description>Si vous compilez via le terminal ou avec Compiler Explorer, nous vous conseillons d&amp;rsquo;utiliser les options ci-dessous, car nous les activerons pour vos rendus de projet :
 -std=c++17 : sp√©cifie que le projet sera compil√© en C++17 -Wall -W : permet d&amp;rsquo;activer un certain nombre de warnings -Werror : transforme les warnings en erreurs, donc tant qu&amp;rsquo;il y a des warnings, le programme ne compile pas  Sachez par ailleurs que vous pouvez √©galement utiliser :</description>
    </item>
    
    <item>
      <title>üß¨ Cl√¥ne</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/4-clone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/4-clone/</guid>
      <description>Dans cet exercice, vous verrez comment impl√©menter un constructeur de copie et un op√©rateur d&amp;rsquo;assignation.
Nous en profiterons aussi pour vous montrer comment surcharger l&amp;rsquo;op√©rateur &amp;lt;&amp;lt;.
 Pour cet exercice, vous modifierez le fichier :
- chap-02/3-clone.cpp
La cible √† compiler est c2-3-clone.
 Constructeur de copie Dans la fonction main, instanciez √† la suite du code existant une nouvelle instance de Person et initialis√©e l√† √† partir de la variable batman.</description>
    </item>
    
    <item>
      <title>üßÆ Calculette</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/2-practice/4-calculator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/2-practice/4-calculator/</guid>
      <description>Dans cet exercice, vous refactoriserez le code d&amp;rsquo;une mini-calculette. Cela sera l&amp;rsquo;occasion de voir l&amp;rsquo;instruction switch, les fonctions et le passage de param√®tres par r√©f√©rence.
 Pour cet exercice, vous modifierez le fichier :
- chap-01/4-calculator.cpp
La cible √† compiler est c1-4-calculator.
 Comprendre le code existant Commen√ßons par parcourir le code fourni, afin de comprendre ce qu&amp;rsquo;il s&amp;rsquo;y passe.
int main(int argc, char** argv) { // Parsing program parameters.  some code.</description>
    </item>
    
    <item>
      <title>Clang-Format</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/5-clang-format/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/5-clang-format/</guid>
      <description>Clang-Format est un outil permettant de formatter automatiquement vos fichiers (indentation, espaces, retours √† la ligne, etc).
Comme le C++ est un langage avec une syntaxe un peu lourde, utiliser ce type d&amp;rsquo;outils permet de faciliter la lecture du code.
 Configuration de VSCode Clang-Format est d√©j√† disponible dans l&amp;rsquo;extension C/C++ install√©e pr√©c√©demment. Pour qu&amp;rsquo;il se lance automatiquement lorsque vous sauvegardez vos fichiers, suivez les instructions ci-dessous.
 Ouvrez le panneau de commandes VSCode (Ctrl+Shift+P).</description>
    </item>
    
    <item>
      <title>üî≥ Rectangle</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/5-rectangle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/5-rectangle/</guid>
      <description>Cet exercice vous permettra de d√©couvrir :
 comment √©crire des headers en C++, comment extraire l&amp;rsquo;impl√©mentation des fonctions d&amp;rsquo;une classe en dehors de cette classe, √† quoi correspondent les membres statiques d&amp;rsquo;une classe et comment les d√©finir, comment d√©l√©guer un appel √† un autre constructeur.   Pour cet exercice, vous modifierez les fichiers :
- chap-02/4-rectangle/main.cpp
- chap-02/4-rectangle/Rectangle.cpp
- chap-02/4-rectangle/Rectangle.h
La cible √† compiler est c2-4-rectangle.
 Header en C++ Vous commencez l&amp;rsquo;exercice avec une fonction main dans le fichier main.</description>
    </item>
    
    <item>
      <title>üí† Polyg√¥ne</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/6-polygon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/6-polygon/</guid>
      <description>Dans cet exercice, vous d√©couvrirez la notion d&amp;rsquo;alias et le m√©canisme d&amp;rsquo;amiti√©.
Pour terminer, vous serez confront√© √† votre premi√®re &amp;ldquo;dangling reference&amp;rdquo;.
 Pour cet exercice, vous modifierez les fichiers :
- chap-02/5-polygon/main.cpp
- chap-02/CMakeLists.txt
Et vous ajouterez les fichiers :
- chap-02/5-polygon/Polygon.h
- chap-02/5-polygon/Polygon.cpp
La cible √† compiler est c2-5-polygon.
 Pr√©sentation de l&amp;rsquo;exercice Pour cet exercice, vous utiliserez la m√™me m√©thodologie que pour l&amp;rsquo;exercice first-class :
 D√©commenter la prochaine ligne du main.</description>
    </item>
    
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/test/</guid>
      <description>F√©licitations !! Vous avez enfin termin√© le Chapitre 1 ! Vous aviez l&amp;rsquo;impression qu&amp;rsquo;il n&amp;rsquo;en finirait jamais, qu&amp;rsquo;il aspirerait votre √¢me dans des m√©andres t√©n√©breux, mais c&amp;rsquo;est bon, vous l&amp;rsquo;avez terrass√© ü•≥üéâ
 Avant de nous quitter pour aller savourer ce moment, vous devriez profiter que le chapitre soit bien frais dans votre t√™te pour r√©pondre au questionnaire ci-dessous. Nous vous rappelons que si vous √™tes en M1 √† l&amp;rsquo;UGE, il participera √† votre notation.</description>
    </item>
    
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/test/</guid>
      <description>Vous pensiez que le Chapitre 2 serait plus l√©ger que le Chapitre 1 ? D√©sol√©e de vous avoir d√©√ßus üòÖ
Mais bon, vous l&amp;rsquo;avez enfin termin√©, donc vous pouvez √™tre fiers de vous ! üòÄ
 Avant de nous quitter pour aller savourer ce moment, vous devriez profiter que le chapitre soit bien frais dans votre t√™te pour r√©pondre au questionnaire ci-dessous. Nous vous rappelons que si vous √™tes en M1 √† l&amp;rsquo;UGE, il participera √† votre notation.</description>
    </item>
    
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/test/</guid>
      <description>C&amp;rsquo;est l&amp;rsquo;heure du test ! Bon courage üôÇ
 Vous √™tes : Votre adresse mail : Votre groupe : Groupe 1Groupe 2Groupe Alternants1- Comment d√©finir la p√©riode de validit√© d‚Äôun objet ?

2- Citez une bonne raison d‚Äôallouer de la m√©moire via un unique_ptr plut√¥t que via un pointeur simple (avec new).

3- Quelle fonction de la librarie standard permet de transf√©rer le contenu d‚Äôun objet dans un autre ?</description>
    </item>
    
    <item>
      <title>Retours ?</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/test/</guid>
      <description>Si vous avez rencontr√© des probl√®mes lors de l&amp;rsquo;installation d&amp;rsquo;un des logiciels, n&amp;rsquo;h√©sitez pas √† nous l&amp;rsquo;indiquer, afin que nous puissions am√©liorer nos explications. Merci d&amp;rsquo;avance ! üôÇ
 Vous √™tes : Votre adresse mail : Votre groupe : Groupe 1Groupe 2Groupe Alternants1- Avez-vous rencontr√© des difficult√©s lors de l‚Äôinstallation d‚Äôun des composants ? Si oui, du ou desquels s‚Äôagit-il ?</description>
    </item>
    
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/summary/</guid>
      <description>Ce qu&amp;rsquo;il faut retenir Th√©orie  C++ est un langage compil√©, performant, document√©, standardis√© et disposant d&amp;rsquo;une large communaut√©. Il est verbeux et sa syntaxe font qu&amp;rsquo;il ne s&amp;rsquo;agit pas du langage le plus agr√©able √† lire. Une r√©f√©rence est une variable que permet d&amp;rsquo;aliaser une autre variable. Les deux variables font donc r√©f√©rence au m√™me espace dans la m√©moire.  M√©thodologie  Lorsqu&amp;rsquo;on a besoin d&amp;rsquo;une fonction, on commence par aller voir sur Internet si elle n&amp;rsquo;existe pas d√©j√† dans la librairie standard.</description>
    </item>
    
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/summary/</guid>
      <description>Ce qu&amp;rsquo;il faut retenir Th√©orie  A quoi correspondent les termes attributs et fonction-membres constructeur = fonction appel√©e √† l&amp;rsquo;instanciation d&amp;rsquo;une classe constructeur par d√©faut = constructeur √† 0 param√®tre impl√©mentation par d√©faut = impl√©mentation d&amp;rsquo;une fonction g√©n√©r√©e par le compilateur dans certaines conditions op√©rateur d&amp;rsquo;assignation = fonction appel√©e lorsque l&amp;rsquo;on √©crit a = ...;, sachant que a a √©t√© instanci√© plus t√¥t surcharge = fonction de m√™me nom, acceptant un nombre diff√©rent de param√®tres et/ou des param√®tres de types diff√©rents Lorsque la variable r√©f√©renc√©e par une r√©f√©rence est d√©truite, on a une dangling reference  Pratique  Utiliser this pour faire r√©f√©rence √† l&amp;rsquo;instance courante Comparer this et &amp;amp;other au d√©but de l&amp;rsquo;op√©rateur d&amp;rsquo;assignation Utiliser const aussi souvent que possible   Ce qu&amp;rsquo;il faut savoir faire Langage  D√©finir une classe : class A {}; (sans oublier le point-virgule) D√©finir des attributs et des fonctions-membres Indiquer la visibilit√© d&amp;rsquo;un ou plusieurs membres : public: - private: D√©finir un constructeur : ClassName(int p1, char p2) : _a1 { p1 }, _a2 { p2 } { } D√©l√©guer la construction √† un autre constructeur : ClassName(int p) : ClassName { p, p } {} D√©finir un constructeur de copie : ClassName(const ClassName&amp;amp; other) : _a1 { other.</description>
    </item>
    
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/summary/</guid>
      <description>Ce qu&amp;rsquo;il faut retenir Th√©orie  La dur√©e de vie d&amp;rsquo;un objet s&amp;rsquo;√©tend de sa construction √† sa destruction. Lorsque la dur√©e de vie d&amp;rsquo;un objet s&amp;rsquo;ach√®ve, il n&amp;rsquo;est plus valide de l&amp;rsquo;utiliser. La port√©e d&amp;rsquo;une r√©f√©rence peut exc√©der la dur√©e de vie de l&amp;rsquo;objet r√©f√©renc√© (=&amp;gt; dangling reference). Un objet A est propri√©taire d&amp;rsquo;un objet B si la destruction de A entra√Æne celle de B. Aucune copie n&amp;rsquo;est faite lorsqu&amp;rsquo;on initialise une variable avec la valeur de retour d&amp;rsquo;une fonction (mandatory copy-elision)  Pratique  Un unique_ptr n&amp;rsquo;est pas copiable.</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://laefy.github.io/CPP_Learning/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/faq/</guid>
      <description>Pourquoi je n&amp;rsquo;arrive pas √† lancer mon projet avec CMake ? Cela peut-√™tre d√ª √† plusieurs raisons :
1. Vous n&amp;rsquo;avez pas ouvert le bon dossier dans VSCode. Il faut toujours ouvrir le dossier qui contient tous les chapitres et tous les TPs, pas le dossier d&amp;rsquo;un chapitre ou d&amp;rsquo;un TP en particulier.
2. Vous avez essay√© de lancer le programme via le menu Run de VSCode. Si vous tentez de lancer un programme de cette mani√®re, VSCode va g√©n√©rer un fichier launch.</description>
    </item>
    
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter0/test_done/</guid>
      <description>Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ Retourner √† la synth√®se du Chapitre</description>
    </item>
    
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/test_done/</guid>
      <description>Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ Retourner √† la synth√®se du Chapitre</description>
    </item>
    
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/test_done/</guid>
      <description>Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ Retourner √† la synth√®se du Chapitre</description>
    </item>
    
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/test_done/</guid>
      <description>Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ Retourner √† la synth√®se du Chapitre</description>
    </item>
    
    <item>
      <title>Workflow</title>
      <link>https://laefy.github.io/CPP_Learning/workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/workflow/</guid>
      <description>Afin de pouvoir mettre en place votre environnement de travail rapidement, vous pouvez suivre les √©tapes ci-dessous.
 R√©cup√©rer le d√©p√¥t Git du cours et des TPs   Forkez le d√©p√¥t https://github.com/Laefy/CPP_Learning_Code/.   Ouvrez une nouvelle fen√™tre dans VSCode et cliquez sur &amp;ldquo;clone repository&amp;hellip;&amp;rdquo;   Copiez le lien de votre d√©p√¥t cr√©√© par le fork.   Collez ce lien dans la fen√™tre de VSCode et s√©lectionnez &amp;ldquo;Clone from URL&amp;rdquo;.</description>
    </item>
    
  </channel>
</rss>
