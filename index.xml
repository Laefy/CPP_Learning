<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Accueil on Cours de C&#43;&#43; - Niveau Master</title>
    <link>https://laefy.github.io/CPP_Learning/</link>
    <description>Recent content in Accueil on Cours de C&#43;&#43; - Niveau Master</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <atom:link href="https://laefy.github.io/CPP_Learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>üíº Hi√©rarchie professionnelle</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/1-hierarchy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter4/1-hierarchy/</guid>
      <description>Dans cette premi√®re partie, vous apprendrez comment d√©finir des relations de parent√© entre vos classes.&#xA;Nous ne parlerons sur cette page que d&amp;rsquo;h√©ritage dit &amp;ldquo;statique&amp;rdquo;, c&amp;rsquo;est-√†-dire que nous ne chercherons pas √† modifier dans les classes-fille le comportement h√©rit√© de la classe-m√®re.&#xA;Pour cet exercice, vous modifierez les fichiers :&#xA;- chap-04/1-hierarchy/Boss.cpp&#xA;- chap-04/1-hierarchy/Boss.h&#xA;- chap-04/1-hierarchy/Staff.cpp&#xA;- chap-04/1-hierarchy/Staff.h&#xA;- chap-04/1-hierarchy/Intern.cpp&#xA;- chap-04/1-hierarchy/Intern.h&#xA;La cible √† compiler est c4-1-hierarchy.&#xA;D√©finir une classe-m√®re Commencez par jeter un coup d&amp;rsquo;oeil √† chacun des fichiers fournis.</description>
    </item>
    <item>
      <title>Allocation dynamique üéá</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/1-allocation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter3/1-allocation/</guid>
      <description>Cette premi√®re page sera assez courte, elle vous pr√©sentera simplement la syntaxe permettant d&amp;rsquo;allouer dynamiquement de la m√©moire et de la lib√©rer.&#xA;Allouer un seul √©l√©ment Pour allouer un bloc de m√©moire, on utilise le mot-clef new, suivi du type de donn√©e que l&amp;rsquo;on souhaite y placer, puis de la valeur avec laquelle on souhaite l&amp;rsquo;initialiser.&#xA;Cette instruction retourne un pointeur.&#xA;int* ptr_5 = new int { 5 }; std::cout &amp;lt;&amp;lt; *ptr_5 &amp;lt;&amp;lt; std::endl; // --&amp;gt; 5 Comme pour une variable classique, on peut utiliser des {} ou des () pour indiquer la valeur initiale.</description>
    </item>
    <item>
      <title>Assertions</title>
      <link>https://laefy.github.io/CPP_Learning/chapter8/1-assertions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter8/1-assertions/</guid>
      <description>Types d&amp;rsquo;erreurs Lorsqu&amp;rsquo;une erreur se produit dans un logiciel, il s&amp;rsquo;agit soit d&amp;rsquo;une erreur de programmation, soit d&amp;rsquo;une erreur d&amp;rsquo;utilisation du logiciel.&#xA;Voici quelques exemples :&#xA;Un pointeur null a √©t√© d√©r√©f√©renc√© : erreur de programmation. Le programme a demand√© √† l&amp;rsquo;utilisateur de rentrer une image, mais celui-ci a fournit un fichier texte : erreur d&amp;rsquo;utilisation. On a √©crit dans la case array.size() de array : erreur de programmation. L&amp;rsquo;utilisateur a entra√Æn√© &amp;ldquo;-34&amp;rdquo; alors que le programme attendait un entier positif : erreur d&amp;rsquo;utilisation.</description>
    </item>
    <item>
      <title>C&#39;est quoi un objet d√©j√† ?</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/1-poo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter2/1-poo/</guid>
      <description>Commen√ßons par quelques piq√ªres de rappel √† propos des notions de POO que vous avez pu voir l&amp;rsquo;an dernier.&#xA;Objet Dans un programme, un objet est un √©l√©ment constitu√© d&amp;rsquo;un √©tat, et disposant d&amp;rsquo;une interface permettant d&amp;rsquo;int√©ragir avec cet √©tat.&#xA;Classe Un objet est g√©n√©ralement cr√©√© √† partir d&amp;rsquo;un mod√®le, que l&amp;rsquo;on appelle classe. Un objet cr√©√© √† partir d&amp;rsquo;une classe constitue une instance de cette classe.&#xA;Etat L&amp;rsquo;√©tat d&amp;rsquo;un objet est compos√© de valeurs, pouvant ou non varier au cours de l&amp;rsquo;ex√©cution du programme.</description>
    </item>
    <item>
      <title>Compilateur</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/1-compiler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter0/1-compiler/</guid>
      <description>Pour le compilateur, vous devrez utiliser g++ (version &amp;gt;= 9) si vous √™tes sous Windows ou Linux, et clang si vous √™tes sous MacOS.&#xA;Windows Ouvrez un terminal et ex√©cutez g++ -v. Si la commande r√©ussit, assurez-vous que la derni√®re ligne indique bien une version de gcc &amp;gt;= 9. Si ce n&amp;rsquo;est pas le cas, installez le gestionnaire de paquet MSYS2 en suivant les instructions sur cette page.&#xA;MSYS2 contient en particulier MinGW, qui est l&amp;rsquo;√©quivalent du compilateur gcc/g++ pour Windows.</description>
    </item>
    <item>
      <title>Introduction</title>
      <link>https://laefy.github.io/CPP_Learning/chapter9/1-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter9/1-introduction/</guid>
      <description>Qu&amp;rsquo;est-ce qu&amp;rsquo;un template ? Les templates sont un m√©canisme du C++ permettant de faire de la programmation g√©n√©rique.&#xA;Le terme &amp;ldquo;template&amp;rdquo; se traduit litt√©ralement par &amp;ldquo;patron&amp;rdquo; en fran√ßais (au sens patron de v√™tement, pas patron d&amp;rsquo;entreprise). Les templates vont donc permettre de construire un mod√®le de classe (ou de fonction) √† partir duquel le compilateur pourra de g√©n√©rer de v√©ritables classes (ou fonctions).&#xA;Notez donc bien que malgr√© le terme, une classe-template n&amp;rsquo;est pas une classe.</description>
    </item>
    <item>
      <title>Parcours et recherches</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/1-searches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter6/1-searches/</guid>
      <description>Parcours de plages Pour parcourir une plage d&amp;rsquo;√©l√©ments, vous devriez normalement d√©j√† savoir qu&amp;rsquo;il faut utiliser une boucle for ou foreach. Les boucles while et do-while ne sont en effet pas vraiment adapt√©es √† ce type d&amp;rsquo;usage.&#xA;Vous trouverez quelques conseils dans cette partie pour rendre votre code plus lisible, concis et fiable.&#xA;Boucle foreach Lorsqu&amp;rsquo;on it√®re sur un conteneur avec une boucle foreach, il faut faire attention √† si l&amp;rsquo;on souhaite r√©cup√©rer une copie de l&amp;rsquo;√©l√©ment ou une r√©f√©rence.</description>
    </item>
    <item>
      <title>Petits programmes</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/6-tips/1-snippets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter0/6-tips/1-snippets/</guid>
      <description>Voici 2 solutions permettant de compiler et de tester rapidement des petits programme.&#xA;Compiler Explorer Vous pouvez utiliser Compiler Explorer pour compiler du code avec √† peu pr√®s tous les compilateurs de la Terre.&#xA;Cet utilitaire vous permet √©galement d&amp;rsquo;ex√©cuter directement votre programme.&#xA;Depuis un terminal Pour compiler Avec g++ :&#xA;g++ f1.cpp f2.cpp f3.cpp -o program -std=c++17 Avec clang :&#xA;clang++ f1.cpp f2.cpp f3.cpp -o program -std=c++17 Vous pouvez ajouter des options de compilation √† la fin de la ligne de commande.</description>
    </item>
    <item>
      <title>Pr√©sentation du langage</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/1-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter1/1-language/</guid>
      <description>Cette page vous pr√©sentera quelques caract√©ristiques du C++, les diff√©rences avec d&amp;rsquo;autres langages que vous avez √©tudi√©s jusque l√†, pourquoi est-ce que certains disent que C++ est compliqu√©, alors que pas forc√©ment, et ce qui fait que le langage est aussi utilis√© aujourd&amp;rsquo;hui. Promis, c&amp;rsquo;est la seule page du cours o√π vous trouverez autant de pav√©s üôÇ&#xA;Quelques caract√©ristiques C++ est un langage de programmation informatique invent√© dans les ann√©es 1980 par un informaticien nomm√© Bjarne Stroustrup.</description>
    </item>
    <item>
      <title>Projets VSCode</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/6-tips/2-vscode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter0/6-tips/2-vscode/</guid>
      <description>Lorsque vous avez un projet un peu plus cons√©quent, il est plus pratique de passer par VSCode pour configurer, compiler et tester vos programmes.&#xA;Configuration avec CMake Vous aurez besoin d&amp;rsquo;un fichier CMakeLists.txt √† la racine de votre r√©pertoire pour configurer le projet. Si celui-ci ne contient qu&amp;rsquo;un seul programme, vous pouvez copier et adapter dans votre CMakeLists.txt les instructions suivantes.&#xA;cmake_minimum_required(VERSION 3.1)&#xD;project(my_project)&#xD;add_executable(my_executable&#xD;my_file1.cpp&#xD;my_file2.cpp&#xD;my_file3.h&#xD;)&#xD;target_compile_features(my_executable PUBLIC cxx_std_17) Pour configurer le projet, utilisez la commande CMake: Configure.</description>
    </item>
    <item>
      <title>Raccourcis VSCode</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/6-tips/3-keybinds-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter0/6-tips/3-keybinds-commands/</guid>
      <description>G√©n√©ral Ouvrir le panneau de commandes VSCode :&#xA;Ctrl+Shift+P&#xA;Configuration, Compilation, Ex√©cution Configurer le projet :&#xA;CMake: Configure&#xA;Compiler un programme :&#xA;Shift+F7 ou CMake: Build Target&#xA;Changer le programme √† ex√©cuter :&#xA;CMake: Set Debug Target&#xA;Lancer le programme :&#xA;F5 ou Debug: Start Debugging&#xA;Debugging Placer un breakpoint √† la ligne du curseur :&#xA;F9&#xA;Reprendre l&amp;rsquo;ex√©cution :&#xA;F5&#xA;Ex√©cuter l&amp;rsquo;instruction suivante :&#xA;F10&#xA;Entrer dans la fonction :</description>
    </item>
    <item>
      <title>R√©f√©rence universelle</title>
      <link>https://laefy.github.io/CPP_Learning/chapter10/1-universal-ref/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter10/1-universal-ref/</guid>
      <description>Dans cette premi√®re section, nous commencerons par introduire les concepts de l-value et r-value.&#xA;Cela nous conduira √† vous pr√©senter la notion de r√©f√©rence universelle. Nous vous expliquerons ensuite quand et comment vous en servir dans votre code.&#xA;l-value / r-value Avant de parler concr√®tement des r√©f√©rences universelles, il faut aborder un point essentiel √† leur compr√©hension.&#xA;En C++, une expression est une suite d&amp;rsquo;op√©rateurs et d&amp;rsquo;op√©randes pouvant √™tre √©valu√©e. L&amp;rsquo;√©valuation d&amp;rsquo;une expression peut parfois produire une valeur.</description>
    </item>
    <item>
      <title>Un peu de doc...</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/1-doc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter5/1-doc/</guid>
      <description>Pour d√©marrez ce chapitre, nous allons vous expliquer comment parcourir la documentation que vous trouverez sur le site cppreference.&#xA;Commencez par ouvrir cette page. Vous y trouverez la documentation de la classe vector.&#xA;A premi√®re vue, son contenu peut para√Ætre indigeste. Nous allons donc vous expliquer comment il est structur√© afin que vous puissiez vous y rep√©rer plus facilement.&#xA;Documentation d&amp;rsquo;une classe 1. En-t√™te Dans l&amp;rsquo;en-t√™te de la documentation, vous trouverez le nom de la classe, suivi du header √† inclure afin de pouvoir l&amp;rsquo;utiliser.</description>
    </item>
    <item>
      <title>üêÆ Concerto animalier</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/2-farm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter4/2-farm/</guid>
      <description>Vous allez maintenant apprendre √† d√©finir des classes permettant √† leurs enfants de sp√©cialiser leur comportement. On parle alors de classe polymorphe.&#xA;Nous ferons un petit r√©capitulatif en fin de page, pour rappelez les points essentiels auxquels il faut faire attention lorsque vous d√©finissez des classes polymorphes pour √©viter les bugs.&#xA;Pour cet exercice, vous modifierez les fichiers :&#xA;- chap-04/2-farm/FarmHouse.cpp&#xA;- chap-04/2-farm/Animal.h&#xA;- chap-04/2-farm/Dog.h&#xA;- chap-04/2-farm/Cat.h&#xA;- chap-04/2-farm/Chicken.h&#xA;- chap-04/2-farm/Cow.</description>
    </item>
    <item>
      <title>Dur√©e de vie ‚è≥</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/2-lifespan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter3/2-lifespan/</guid>
      <description>Nous allons maintenant revenir sur l&amp;rsquo;instanciation et la d√©sinstanciation des donn√©es, car ce sont les deux √©v√©nements qui d√©limitent leur p√©riode de validit√©.&#xA;Donn√©e de type fondamental L&amp;rsquo;instanciation d&amp;rsquo;une donn√©e de type fondamental est constitu√© de deux phases.&#xA;Le programme alloue l&amp;rsquo;espace n√©cessaire pour stocker la donn√©e. Si sp√©cifi√© par le programmeur, le contenu de la donn√©e est initialis√©. En ce qui concerne la d√©sinstanciation, le programme d√©salloue l&amp;rsquo;espace r√©serv√© pour la donn√©e.</description>
    </item>
    <item>
      <title>Exceptions</title>
      <link>https://laefy.github.io/CPP_Learning/chapter8/2-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter8/2-exceptions/</guid>
      <description>Qu&amp;rsquo;est-ce qu&amp;rsquo;une exception ? En C++, une exception sert √† interrompre le flot classique d&amp;rsquo;ex√©cution du programme lorsqu&amp;rsquo;un √©v√©nement particulier se produit. Lorsqu&amp;rsquo;une exception est lanc√©e, on sort du bloc courant, et on remonte la callstack autant que n√©cessaire, jusqu&amp;rsquo;√† atteindre un bloc capable de traiter l&amp;rsquo;exception.&#xA;C&amp;rsquo;est donc un m√©canisme extr√™mement utilis√© pour le traitement des erreurs (autant de programmation que d&amp;rsquo;utilisation), puisque l&amp;rsquo;erreur est remont√©e automatiquement jusqu&amp;rsquo;√† l&amp;rsquo;endroit qui peut la traiter, sans avoir besoin de toucher au code des fonctions interm√©diaires.</description>
    </item>
    <item>
      <title>Exemples</title>
      <link>https://laefy.github.io/CPP_Learning/chapter9/2-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter9/2-examples/</guid>
      <description>Nous allons maintenant rentrer dans le vif du sujet en vous pr√©sentant le code de diff√©rents templates.&#xA;Nous d√©taillerons ensuite chacun des √©l√©ments de la syntaxe, afin que vous puissiez les comprendre pour les r√©utiliser dans votre propre code.&#xA;Premier exemple de classe-template Cet exemple consiste en l&amp;rsquo;impl√©mentation d&amp;rsquo;un tableau de taille statique (un peu comme la classe std::array).&#xA;#include &amp;lt;algorithm&amp;gt; #include &amp;lt;cassert&amp;gt; #include &amp;lt;iostream&amp;gt; template &amp;lt;typename ElementType, size_t Size&amp;gt; class StaticArray { public: // Rappel: l&amp;#39;impl√©mentation par d√©faut du constructeur par d√©faut dispara√Æt lorsqu&amp;#39;on // d√©finit explicitement un autre constructeur (ce qui est le cas ici).</description>
    </item>
    <item>
      <title>Hello World üëã</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/2-hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter1/2-hello-world/</guid>
      <description>Nous allons maintenant enfin pouvoir coder ! Dans la suite de ce chapitre, vous verrez comment :&#xA;√©crire un programme, d√©clarer des variables, √©crire sur la sortie standard, lire sur l&amp;rsquo;entr√©e standard, d√©finir des fonctions, utiliser les structures de contr√¥le (conditions, boucles, switch, etc.), cr√©er des tableaux et des cha√Ænes de caract√®res, utiliser des r√©f√©rences. √áa fait beaucoup hein ? üòà&#xA;En r√©alit√©, comme vous avez d√©j√† fait du C et du Java, il y a pas mal de choses que vous connaissez d√©j√†.</description>
    </item>
    <item>
      <title>Premi√®re classe ‚ú®</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/2-first-class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter2/2-first-class/</guid>
      <description>C&amp;rsquo;est parti pour la pratique ! Vous allez ici apprendre √† d√©finir une classe en C++ et √† l&amp;rsquo;instancier.&#xA;Commencez par ouvrir le d√©p√¥t d&amp;rsquo;exercices dans VSCode.&#xA;M√©thodologie Ouvrez le fichier chap-02/1-first_class.cpp, dans lequel on vous fournit le code de la fonction main.&#xA;int main() { // Person p; // p.set_name(&amp;#34;Batman&amp;#34;); // p.set_age(23); // std::cout &amp;lt;&amp;lt; &amp;#34;Person named &amp;#39;&amp;#34; &amp;lt;&amp;lt; p.get_name() &amp;lt;&amp;lt; &amp;#34;&amp;#39; is &amp;#34; &amp;lt;&amp;lt; p.get_age() &amp;lt;&amp;lt; &amp;#34; years old.</description>
    </item>
    <item>
      <title>Tableaux dynamiques</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/2-vectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter5/2-vectors/</guid>
      <description>Vous apprendrez ici √† utiliser des vector de mani√®re un peu plus avanc√©e : construction, acc√®s, insertions, suppressions et recherches n&amp;rsquo;auront plus de secrets pour vous !&#xA;Pour cet exercice, vous modifierez le fichier :&#xA;- chap-05/1-vectors.cpp&#xA;La cible √† compiler est c5-1-vectors.&#xA;Construction Au chapitre pr√©c√©dent, nous vous avions pr√©sent√© diff√©rentes syntaxes permettant d&amp;rsquo;instancier une classe. Nous vous avions en particulier indiquer qu&amp;rsquo;il √©tait possible d&amp;rsquo;utiliser la syntaxe Class c { p1, p2 }; ou bien la syntaxe Class c(p1, p2);.</description>
    </item>
    <item>
      <title>Template variadique</title>
      <link>https://laefy.github.io/CPP_Learning/chapter10/2-variadiac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter10/2-variadiac/</guid>
      <description>Un template variadique, c&amp;rsquo;est un template qui attend un nombre variable de param√®tres. Vous en avez d√©j√† utilis√© plusieurs, comme :&#xA;- la fonction-template emplace_back de std::vector, qui attend n&amp;rsquo;importe quels nombres et types d&amp;rsquo;arguments, et les utilisent pour construire le nouvel √©l√©ment,&#xA;- la fonction-template std::make_unique, qui fonctionne sur le m√™me principe,&#xA;- la classe-template std::tuple, qui permet de repr√©senter un N-uplet contenant n&amp;rsquo;importe quels types.&#xA;L&amp;rsquo;objectif de cette section sera de vous apprendre √† d√©finir vos propres templates variadiques.</description>
    </item>
    <item>
      <title>Transformations</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/2-transformations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter6/2-transformations/</guid>
      <description>Maintenant que nous vous avons pr√©sent√© les fonctions permettant de r√©cup√©rer des informations √† partir d&amp;rsquo;une plage d&amp;rsquo;√©l√©ments, nous allons vous pr√©senter celles qui permettent de manipuler et de transformer ces plages.&#xA;Suppressions Afin de supprimer des √©l√©ments d&amp;rsquo;une plage, on utilise la fonction std::remove. Cette fonction a pour effet de d√©placer les √©l√©ments √† conserver au d√©but de la plage, en pr√©servant leur ordre. Elle renvoie un it√©rateur sur le nouvel it√©rateur de fin de plage.</description>
    </item>
    <item>
      <title>Visual Studio Code</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/2-vscode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter0/2-vscode/</guid>
      <description>Pour l&amp;rsquo;IDE, nous vous conseillons d&amp;rsquo;utiliser Visual Studio Code, car celui-ci est disponible sur toutes les plateformes (contrairement √† Visual Studio tout court), qu&amp;rsquo;il est tr√®s bien document√© et que vous pourrez trouvez de nombreux tutoriels en ligne pour apprendre √† l&amp;rsquo;utiliser.&#xA;Vous trouverez ci-dessous les instructions permettant d&amp;rsquo;installer VSCode.&#xA;Windows Installez VSCode en suivant les instructions du paragraphe Installation. Si l&amp;rsquo;installeur vous propose d&amp;rsquo;installer git, vous pouvez acceptez, cela vous fera gagner du temps pour la suite.</description>
    </item>
    <item>
      <title>Autres conteneurs s√©quentiels</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/3-sequentials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter5/3-sequentials/</guid>
      <description>Vous allez maintenant manipuler les autres conteneurs s√©quentiels que la libraire propose.&#xA;Pour cet exercice, vous modifierez le fichier :&#xA;- chap-05/2-sequentials.cpp&#xA;La cible √† compiler est c5-2-sequentials.&#xA;Tableaux de taille fixe Pour cr√©er des tableaux de taille fixe, il est bien entendu possible d&amp;rsquo;utiliser les tableaux primitifs. L&amp;rsquo;inconv√©nient, c&amp;rsquo;est qu&amp;rsquo;il faut penser √† les initialiser, ce que tout le monde ne pense pas toujours √† faire&amp;hellip;.&#xA;Du coup, pour pallier √† ce probl√®me, il est possible d&amp;rsquo;utiliser la classe std::array.</description>
    </item>
    <item>
      <title>CMake</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/3-cmake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter0/3-cmake/</guid>
      <description>Afin de g√©n√©rer les art√©facts pour la compilation, nous utiliserons CMake.&#xA;Installation Windows Ouvrez un terminal MSYS2 UCRT64. Installez les paquets cmake et make avec l&amp;rsquo;instruction suivante : pacman -S mingw-w64-ucrt-x86_64-cmake mingw-w64-ucrt-x86_64-make Linux / MacOS Ouvrez un terminal. Utilisez votre gestionnaire de package afin d&amp;rsquo;installer cmake. Int√©gration √† VSCode Afin de pouvoir utiliser CMake facilement depuis VSCode, il faut installer les extensions CMake et CMakeTools.&#xA;D√©marrez VSCode. Ouvrez le panneau des extensions et recherchez les extensions CMake et CMakeTools.</description>
    </item>
    <item>
      <title>Constructeur üî®</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/3-constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter2/3-constructor/</guid>
      <description>Dans cet exercice, vous apprendrez √† param√©trer la construction de vos objets.&#xA;Constructeur √† param√®tres Ouvrez le fichier chap-02/2-constructor.cpp. Il contient une correction de l&amp;rsquo;exercice pr√©c√©dent.&#xA;Vous aviez impl√©ment√© une fonction-membre set_name dans la classe Person pour initialiser l&amp;rsquo;attribut _name. Or, ce serait bien d&amp;rsquo;une part de r√©ellement pouvoir initialiser cet attribut plut√¥t que de le modifier apr√®s l&amp;rsquo;instanciation, et d&amp;rsquo;autre part, de supprimer ce setter, afin qu&amp;rsquo;une fois initialis√©, il ne soit plus possible de modifier _name.</description>
    </item>
    <item>
      <title>D√©brief</title>
      <link>https://laefy.github.io/CPP_Learning/chapter9/3-syntaxe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter9/3-syntaxe/</guid>
      <description>D√©finition d&amp;rsquo;un template Pour d√©finir un template, il faut √©crire template &amp;lt;...&amp;gt; devant la d√©finition de la classe ou fonction templat√©e.&#xA;Les chevrons contiennent la liste des param√®tres du template. Chaque param√®tre est typ√© par :&#xA;- typename : il faut donc passer un nom de type en param√®tre,&#xA;- un type int√©gral, comme size_t, char, int, &amp;hellip; : il faut passer une expression du bon type √©valuable √† la compilation,</description>
    </item>
    <item>
      <title>El√©ments de syntaxe ‚úç</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/3-syntax-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter1/3-syntax-elements/</guid>
      <description>Nous allons vous pr√©senter les √©l√©ments de syntaxe de base du langage.&#xA;Comme vous pourrez le constater, mis √† part quelques subtilit√©s, la plupart des informations que vous allez lire ici devrait √™tre similaire √† ce que vous avez d√©j√† appris en C ou en Java.&#xA;Variables et types fondamentaux Comme dans tous les langages ou presque, on retrouve :&#xA;les entiers (sign√©s ou non-sign√©s) : int, short, unsigned int, &amp;hellip; les flottants : float, double les types caract√®re : char, unsigned char le type bool√©en : bool (et non pas boolean comme en Java ‚ö†Ô∏è) Pour d√©finir des variables, c&amp;rsquo;est comme d&amp;rsquo;habitude : &amp;lt;type&amp;gt; &amp;lt;nom&amp;gt; = &amp;lt;valeur&amp;gt;;</description>
    </item>
    <item>
      <title>Espace de stockage üíæ</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/3-storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter3/3-storage/</guid>
      <description>Sur cette page, nous rappelerons ce que sont les variables et les pointeurs, et comment ils peuvent √™tre repr√©sent√©s en m√©moire, puis nous ferons de m√™me pour les r√©f√©rences.&#xA;Nous pr√©senterons ensuite les sp√©cificit√©s des trois zones dans lesquelles le programme alloue de la m√©moire : la m√©moire statique, la pile et le tas.&#xA;Cela vous aidera, j&amp;rsquo;esp√®re, √† visualiser mentalement quelles sont les donn√©es valides du programme.&#xA;Repr√©sentation Variables Une variable est un identifiant permettant d&amp;rsquo;acc√©der √† une donn√©e de taille fixe en m√©moire.</description>
    </item>
    <item>
      <title>It√©rateurs</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/3-iterators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter6/3-iterators/</guid>
      <description>Normalement, avec tout ce que vous avez vu jusqu&amp;rsquo;ici, vous devriez √™tre capable d&amp;rsquo;utiliser correctement un it√©rateur :&#xA;d√©r√©f√©rencement avec *it incr√©mentation avec ++it r√©cup√©rer les it√©rateurs de d√©but et de fin d&amp;rsquo;un conteneur avec ctn.begin() et ctn.end() ins√©rer un √©l√©ment dans un conteneur avec auto it_on_new = ctn.insert(it, new_value) supprimer un √©l√©ment d&amp;rsquo;un conteneur avec auto it_on_next = ctn.erase(it) Vous allez maintenant voir ce qu&amp;rsquo;il faut faire pour impl√©menter vos propres it√©rateurs.</description>
    </item>
    <item>
      <title>R√©solution d&#39;appel virtuel</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/3-virtual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter4/3-virtual/</guid>
      <description>Nous allons maintenant rentrer dans les d√©tails de ce qu&amp;rsquo;il se passe sous le manteau, lorsque le programme effectue un appel virtuel.&#xA;Virtual table Lorsqu&amp;rsquo;une classe Parent contenant des fonctions virtuelles est compil√©e, le compilateur va g√©n√©rer pour l&amp;rsquo;ensemble des classes qui en d√©rivent une virtual table. Il s&amp;rsquo;agit d&amp;rsquo;une tableau qui contient, pour chaque fonction virtuelle de la classe, un pointeur sur la fonction qui sera vraiment appel√©e.&#xA;Analysons la hi√©rarchie suivante :</description>
    </item>
    <item>
      <title>Sp√©cialisations</title>
      <link>https://laefy.github.io/CPP_Learning/chapter10/3-specializations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter10/3-specializations/</guid>
      <description>Cette section sera consacr√©e √† la sp√©cialisation de templates de fonctions et de classes.&#xA;Une sp√©cialisation est la red√©finition d&amp;rsquo;une entit√©e templat√©e, qui va s&amp;rsquo;appliquer pour des param√®tres particuliers. Il y a de nombreux cas d&amp;rsquo;utilisation des sp√©cialisation, l&amp;rsquo;un d&amp;rsquo;entre eux √©tant de d√©finir de traiter des cas particuliers.&#xA;Sp√©cialisation de fonctions Soit la fonction templat√©e suivante, permettant d&amp;rsquo;afficher des valeurs dans le terminal :&#xA;template &amp;lt;typename T&amp;gt; void print(const T&amp;amp; value) { std::cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; std::endl; } Si on lui passe des bool√©ens, cette fonction affichera 0 ou 1.</description>
    </item>
    <item>
      <title>Compilation en terminal</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/6-tips/4-terminal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter0/6-tips/4-terminal/</guid>
      <description>Options g++ et clang++ Si vous compilez via le terminal ou avec Compiler Explorer, nous vous conseillons d&amp;rsquo;utiliser les options ci-dessous, car nous les activerons pour vos rendus de projet :&#xA;-std=c++17 : sp√©cifie que le projet sera compil√© en C++17 (sans cette option, certains fichiers peuvent ne pas compiler) -Wall -W : permet d&amp;rsquo;activer un certain nombre de warnings -Werror : transforme les warnings en erreurs, donc tant qu&amp;rsquo;il y a des warnings, le programme ne compile pas Sachez par ailleurs que vous pouvez √©galement utiliser :</description>
    </item>
    <item>
      <title>Conteneurs associatifs</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/4-associatives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter5/4-associatives/</guid>
      <description>Un conteneur associatif est un conteneur dans lequel les √©l√©ments peuvent √™tre index√©s par des objets, et non plus seulement par des entiers.&#xA;Vous allez donc ici voir les diff√©rents types de conteneurs associatifs propos√©s par la STL.&#xA;Pour cet exercice, vous modifierez les fichiers :&#xA;- chap-05/3-associatives/main.cpp&#xA;- chap-05/3-associatives/keys.h&#xA;La cible √† compiler est c5-3-associatives.&#xA;Les sets (ensembles) Un set est un conteneur dans lequel les √©l√©ments sont &amp;ldquo;index√©s par eux-m√™mes&amp;rdquo;.</description>
    </item>
    <item>
      <title>Destructeur üí£</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/4-destructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter2/4-destructor/</guid>
      <description>Si le constructeur est la fonction qui permet de d√©finir ce qu&amp;rsquo;il se passe lorsqu&amp;rsquo;un objet est instanci√©, vous vous doutez probablement que le destructeur est la fonction qui permet de d√©finir ce qu&amp;rsquo;il se passe lorsqu&amp;rsquo;un objet est &amp;ldquo;d√©sinstanci√©&amp;rdquo;.&#xA;Sur cette page, nous vous expliquerons d&amp;rsquo;abord o√π se produit la d√©sinstanciation d&amp;rsquo;un objet, et nous vous montrerons ensuite comment d√©finir son destructeur.&#xA;D√©sinstanciation, kesako ?? La d√©sinstanciation, c&amp;rsquo;est tout simplement le contraire de l&amp;rsquo;instanciation.</description>
    </item>
    <item>
      <title>Git</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/4-git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter0/4-git/</guid>
      <description>Pour le gestionnaire de version, nous utiliserons git et nous utiliserons GitHub pour l&amp;rsquo;h√©bergement des d√©p√¥ts.&#xA;GitHub Cr√©ation de compte Commencez par cr√©er un compte si vous n&amp;rsquo;en avez pas d√©j√† un.&#xA;G√©n√©ration de clef SSHs Depuis quelques ann√©es, pour pouvoir push sur un d√©p√¥t, il est n√©cessaire de passer par la m√©thode SSH (HTML ne permet plus d&amp;rsquo;√©diter, juste de consulter).&#xA;Pour associer une nouvelle clef SSH √† votre machine, suivez les instructions du paragraphe &amp;ldquo;Generating a new SSH key&amp;rdquo; et enregistrez la clef √† l&amp;rsquo;emplacement par d√©faut (c&amp;rsquo;est-√†-dire sans sp√©cifier de chemin de sauvegarde).</description>
    </item>
    <item>
      <title>Lambdas</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/4-lambdas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter6/4-lambdas/</guid>
      <description>Les lambdas sont des objets-fonction un peu sp√©ciaux, que l&amp;rsquo;on peut facilement d√©finir depuis le corps d&amp;rsquo;une fonction. Vous avez d√©j√† d√ª voir de nombreux exemples d&amp;rsquo;utilisation de lambda tout au long de ce cours. Nous allons maintenant revenir plus en d√©tail sur leur fonctionnement et vous montrez tout ce qu&amp;rsquo;il est possible de faire avec.&#xA;Syntaxe La d√©finition d&amp;rsquo;une lambda est compos√©e en g√©n√©ral de trois parties :&#xA;[c1, c2, c3](int p1, int p2, int p3) { return c1 * p1 + c2 * p2 + c3 * p3; } La partie entre crochet s&amp;rsquo;appelle la capture.</description>
    </item>
    <item>
      <title>Librairie standard üìö</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/4-std-lib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter1/4-std-lib/</guid>
      <description>Sur cette page, vous allez apprendre √† utiliser quelques classes fournies par la librarie standard pour manipuler cha√Ænes de caract√®res et tableaux. Vous verrez √©galement comment √©crire ou lire dans des flux pour int√©ragir avec l&amp;rsquo;utilisateur.&#xA;Cha√Ænes de caract√®res Comme en C, const char* est le type fondamental associ√© √† une cha√Æne de caract√®res litt√©rale (c&amp;rsquo;est-√†-dire √©crite en dur, avec les guillemets autour) :&#xA;auto str = &amp;#34;hello&amp;#34;; // -&amp;gt; str est de type const char* Cependant, ce n&amp;rsquo;est pas du tout pratique pour faire des op√©rations comme des concat√©nations, des recherches, ou m√™me simplement r√©cup√©rer la taille de la cha√Æne.</description>
    </item>
    <item>
      <title>Polymorphisme</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/4-polymorphism/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter4/4-polymorphism/</guid>
      <description>Vous avez probablement d√©j√† entendu le terme polymorphisme, vous l&amp;rsquo;avez peut-√™tre m√™me d√©j√† utilis√©, mais quand vous y r√©fl√©chissez, si on vous demandait de le d√©finir clairement, vous ne sauriez pas forc√©ment quoi r√©pondre. Cette page sera donc l&amp;rsquo;occasion de revenir sur sa d√©finition.&#xA;Dans ce chapitre, nous nous sommes int√©ress√©s √† deux mani√®res de mettre-en-ouvre le polymorphisme en C++ : l&amp;rsquo;h√©ritage statique et l&amp;rsquo;h√©ritage dynamique. Nous d√©taillerons les diff√©rences entre les deux et dans quels cas utiliser l&amp;rsquo;un ou l&amp;rsquo;autre.</description>
    </item>
    <item>
      <title>SFINAE</title>
      <link>https://laefy.github.io/CPP_Learning/chapter10/4-sfinae/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter10/4-sfinae/</guid>
      <description>Nous allons maintenant vous expliquer ce que signifie SFINAE, le besoin auquel ce m√©canisme r√©pond et comment le mettre en oeuvre dans votre code.&#xA;Le besoin Supposons que nous souhaitions pouvoir r√©cup√©rer une clef pour diff√©rents type √† l&amp;rsquo;aide d&amp;rsquo;une fonction get_key(const Type&amp;amp;), en utilisant des overloads.&#xA;class Person { public: Person(const std::string&amp;amp; name) : _name { name } {} const std::string&amp;amp; get_name() const { return _name; } private: const std::string _name; }; // Overload pour notre classe Person.</description>
    </item>
    <item>
      <title>Usage des r√©f√©rences üîÄ</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/4-references/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter3/4-references/</guid>
      <description>Comme cela doit para√Ætre encore un peu abstrait, nous allons vous pr√©senter concr√®tement les principaux cas d&amp;rsquo;utilisation des r√©f√©rences. Notez qu&amp;rsquo;il en existe un autre, mais vous le d√©couvrirez dans le chapitre sur l&amp;rsquo;h√©ritage !&#xA;Modifier un argument Le premier cas d&amp;rsquo;utilisation des r√©f√©rences avait d√©j√† √©t√© d√©crit dans le Chapitre 1 : il s&amp;rsquo;agit de pouvoir modifier la valeur ou le contenu d&amp;rsquo;un argument pass√© √† une fonction.&#xA;Pour rappel, lorsque vous passez un objet par valeur en param√®tre d&amp;rsquo;une fonction, l&amp;rsquo;int√©gralit√© de l&amp;rsquo;instance est copi√©e !</description>
    </item>
    <item>
      <title>üöó V√©hicule partag√©</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/5-vehicles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter4/5-vehicles/</guid>
      <description>Pour terminer ce chapitre, nous allons voir comment faire pour acc√©der directement aux attributs de votre classe de base, comment appeler la fonction parent depuis la r√©d√©finition de cette fonction dans la classe-fille et enfin, comment mod√©liser des classes abstraites.&#xA;Pour cet exercice, vous modifierez les fichiers :&#xA;- chap-04/3-vehicles/Program.cpp&#xA;- chap-04/3-vehicles/Vehicle.h&#xA;- chap-04/3-vehicles/Car.h&#xA;- chap-04/3-vehicles/Scooter.h&#xA;La cible √† compiler est c4-3-vehicles.&#xA;Introduction du permis Dans le programme que l&amp;rsquo;on vous fournit, n&amp;rsquo;importe qui peut conduire n&amp;rsquo;importe quoi.</description>
    </item>
    <item>
      <title>Clang-Format</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/5-clang-format/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter0/5-clang-format/</guid>
      <description>Clang-Format est un outil permettant de formatter automatiquement vos fichiers (indentation, espaces, retours √† la ligne, etc).&#xA;Comme le C++ est un langage avec une syntaxe un peu lourde, utiliser ce type d&amp;rsquo;outils permet de faciliter la lecture du code.&#xA;Configuration de VSCode Clang-Format est d√©j√† disponible dans l&amp;rsquo;extension C/C++ install√©e pr√©c√©demment. Pour qu&amp;rsquo;il se lance automatiquement lorsque vous sauvegardez vos fichiers, suivez les instructions ci-dessous.&#xA;Ouvrez le panneau de commandes VSCode (Ctrl + Shift + P).</description>
    </item>
    <item>
      <title>Compilation ‚öôÔ∏è</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/5-compilation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter1/5-compilation/</guid>
      <description>En th√©orie, le contenu de cette page ne devrait √™tre qu&amp;rsquo;une redite de vos cours de C et de compilation de l&amp;rsquo;an dernier.&#xA;Cependant, je sais qu&amp;rsquo;√† la r√©miniscence des moments pass√©s √† r√©viser ces mati√®res, la plupart d&amp;rsquo;entre vous sentez la chaleur de vos larmes couler le long de vos joues.&#xA;Nous allons donc reprendre le sujet en douceur pour faire en sorte que vous compreniez un peu mieux ce qu&amp;rsquo;il se passe pendant la compilation et √† quoi elle sert.</description>
    </item>
    <item>
      <title>Manipulation de cha√Ænes</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/5-strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter5/5-strings/</guid>
      <description>Dans cette partie, nous reviendrons sur les fonctions fournies par la librairie permettant de manipuler des string. Vous apprendrez aussi ce que sont les string_view et √† quoi elles servent.&#xA;Pour cet exercice, vous modifierez le fichier :&#xA;- chap-05/4-strings.cpp&#xA;La cible √† compiler est c5-4-strings.&#xA;Op√©rations standards Parmis les op√©rations standards que l&amp;rsquo;on peut effectuer sur des cha√Ænes de caract√®re, on retrouve :&#xA;la concat√©nation, l&amp;rsquo;extration de sous-cha√Æne, la recherche de caract√®re ou de sous-cha√Æne, la comparaison, le remplacement d&amp;rsquo;une partie de la cha√Æne.</description>
    </item>
    <item>
      <title>Modularit√© üß±</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/5-modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter2/5-modules/</guid>
      <description>Cet exercice vous permettra de d√©couvrir :&#xA;comment √©crire des headers en C++, comment extraire l&amp;rsquo;impl√©mentation des fonctions d&amp;rsquo;une classe en dehors de cette classe, √† quoi correspondent les membres statiques d&amp;rsquo;une classe et comment les d√©finir, comment d√©l√©guer un appel √† un autre constructeur. S√©parer l&amp;rsquo;impl√©mentation des fonctions-membres Ouvrez le dossier chap-02/4-modules. Celui-ci est compos√© de 3 fichiers :&#xA;main.cpp, qui contient une fonction main d√©j√† √©crite Rectangle.h, qui contient une classe Rectangle, Rectangle.</description>
    </item>
    <item>
      <title>Ownership üèòÔ∏è</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/5-ownership/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter3/5-ownership/</guid>
      <description>Jusqu&amp;rsquo;ici, nous vous avons expliqu√© que contrairement au Java, les donn√©es que vous instanciez ne restent pas magiquement en vie tant que vous en avez besoin.&#xA;C&amp;rsquo;est donc √† vous de garantir que vos donn√©es ne seront pas d√©sinstanci√©es avant d&amp;rsquo;avoir fini de les utiliser.&#xA;Sur cette page, nous allons introduire le concept d&amp;rsquo;ownership, qui vous aidera √† mieux architecturer votre code pour √©viter de vous retrouver avec des dangling-references.</description>
    </item>
    <item>
      <title>Op√©rateurs ‚ûó</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/6-polygon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter2/6-polygon/</guid>
      <description>Sur cette page, nous vous montrerons comment impl√©menter vos propres op√©rateurs.&#xA;Nous en profiterons aussi pour vous expliquer comment d√©finir un alias de type et comment d√©finir des fonctions amies.&#xA;D√©finition Un op√©rateur est une fonction, mais qui peut √™tre appel√©e avec une syntaxe &amp;ldquo;simplifi√©e&amp;rdquo;.&#xA;Prenons l&amp;rsquo;exemple de la concat√©nation de std::string :&#xA;auto a = std::string { &amp;#34;a&amp;#34; }; auto b = std::string { &amp;#34;b&amp;#34; }; auto ab = a + b; Dans le code ci-dessus, l&amp;rsquo;expression a + b est en fait un appel √† une fonction dont la signature est quelque chose comme: operator+(std::string, std::string).</description>
    </item>
    <item>
      <title>Paires et tuples</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/6-tuples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter5/6-tuples/</guid>
      <description>Vous avez d√©j√† utilis√© le type pair au cours d&amp;rsquo;exercices pr√©c√©dents. Nous allons maintenant vous pr√©senter son cousin, la classe tuple.&#xA;Pour cet exercice, vous modifierez le fichier :&#xA;- chap-05/5-tuples.cpp&#xA;La cible √† compiler est c5-5-tuples.&#xA;Micro rappel sur les pair La classe pair est un type templat√© avec deux param√®tres :&#xA;std::pair&amp;lt;int, float&amp;gt; such_a_nice_pair { 1, 3.f }; On acc√®de aux √©l√©ments de la pair directement via ses attributs first et second (pas de getters) :</description>
    </item>
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter10/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter10/test/</guid>
      <description>Pas de questionnaire cette semaine, parce que mis en ligne trop tard.&#xA;N&amp;rsquo;h√©sitez n√©anmoins pas √† utiliser le formulaire pour envoyer vos questions.&#xA;Vous √™tes :&#xD;Votre adresse mail :&#xD;Votre groupe :&#xD;Initiaux 1&#xD;Initiaux 2&#xD;Alternants&#xD;Combien de temps avez-vous mis √† compl√©ter ce chapitre ?&#xD;Avez-vous des questions suite √† sa lecture ?&#xD;Avez-vous des commentaires concernant le chapitre et/ou le site ?&#xD;</description>
    </item>
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter4/test/</guid>
      <description>Vous avez termin√© le Chapitre 4 ! C&amp;rsquo;est donc maintenant le moment de connecter vos neurones pour r√©pondre aux questions suivantes.&#xA;Bon courage √† vous üôÇ&#xA;Vous √™tes :&#xD;Votre adresse mail :&#xD;Votre groupe :&#xD;Initiaux 1&#xD;Initiaux 2&#xD;Alternants&#xD;1- Qu‚Äôest-ce qu‚Äôune classe polymorphe ?&#xA;2- D√©finissez une classe polymorphe Nothing qui ne fait rien.&#xA;3- Comment repr√©senter une classe abstraite en C++ ?&#xA;Les questions 4 √† 6 font r√©f√©rence au code suivant :</description>
    </item>
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter5/test/</guid>
      <description>Le premier objectif de ce chapitre √©tait de vous pr√©senter quelques classes de la STL, leurs r√¥les, leurs diff√©rences, dans quelles situations les utiliser et comment.&#xA;Il avait √©galement un deuxi√®me objectif, qui √©tait en quelque sorte de vous apprendre √† vous d√©brouiller tout seul : vous devriez d√©sormais √™tre capable de rechercher par vous-m√™me des informations dans la documentation, et vous devriez aussi appr√©hender un peu mieux qu&amp;rsquo;avant les messages du compilateur.</description>
    </item>
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter6/test/</guid>
      <description>C&amp;rsquo;est l&amp;rsquo;heure du test ! N&amp;rsquo;oubliez pas que vous pouvez utiliser Godbolt pour compiler et tester des petits bouts de code.&#xA;Bon courage √† vous üôÇ&#xA;Vous √™tes :&#xD;Votre adresse mail :&#xD;Votre groupe :&#xD;Initiaux 1&#xD;Initiaux 2&#xD;Alternants&#xD;1- Quel type de boucle faut-il utiliser pour modifier la structure d‚Äôun conteneur lors d‚Äôun parcours ?&#xA;2- Dans quel cas peut-il √™tre int√©ressant d‚Äôutiliser la fonction std::for_each ?</description>
    </item>
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter8/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter8/test/</guid>
      <description>C&amp;rsquo;est l&amp;rsquo;heure du test ! N&amp;rsquo;oubliez pas que vous pouvez utiliser Godbolt pour compiler et tester des petits bouts de code.&#xA;Bon courage √† vous üôÇ&#xA;Vous √™tes :&#xD;Votre adresse mail :&#xD;Votre groupe :&#xD;Initiaux 1&#xD;Initiaux 2&#xD;Alternants&#xD;1- A quoi sert une assertion ?&#xA;2- Pourquoi ne faut-il pas utiliser d‚Äôassertions pour traiter une erreur d‚Äôutilisation d‚Äôun logiciel ?&#xA;3- Ecrivez une assertion permettant de s‚Äôassurer qu‚Äôune variable name de type std::string n‚Äôest pas vide.</description>
    </item>
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter9/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter9/test/</guid>
      <description>C&amp;rsquo;est l&amp;rsquo;heure du test ! N&amp;rsquo;oubliez pas que vous pouvez utiliser Godbolt pour compiler et tester des petits bouts de code.&#xA;Bon courage √† vous üôÇ&#xA;Vous √™tes :&#xD;Votre adresse mail :&#xD;Votre groupe :&#xD;Initiaux 1&#xD;Initiaux 2&#xD;Alternants&#xD;1- Que faut-il √©crire juste avant la d√©finition d‚Äôune classe (ou fonction) pour en faire une classe (ou fonction) templat√©e ?&#xA;2- Pourquoi n‚Äôest-il pas toujours possible de placer l‚Äôimpl√©mentation des fonctions-membres d‚Äôune classe-template dans un .</description>
    </item>
    <item>
      <title>Questionnaire ‚òë</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter1/test/</guid>
      <description>F√©licitations !! Vous avez enfin termin√© le Chapitre 1 ! ü•≥üéâ&#xA;Le questionnaire ci-dessous vous aidera √† savoir si vous avez bien compris le cours ou non.&#xA;Il n&amp;rsquo;a donc pas vocation √† vous √©valuer, mais √† vous donner une id√©e de ce que vous auriez lu trop vite ou n&amp;rsquo;auriez pas assez pratiqu√©.&#xA;Dans tous les cas, si vous r√©pondez √† ce questionnaire et cliquez sur le bouton Valider, vos r√©ponses nous seront envoy√©es par mail et nous vous ferons un petit retour sur ce que vous avez r√©ussi ou non üòâ</description>
    </item>
    <item>
      <title>Questionnaire ‚òë</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter2/test/</guid>
      <description>Vous √™tes :&#xD;Votre adresse mail :&#xD;Votre groupe :&#xD;Initiaux 1&#xD;Initiaux 2&#xD;Alternants&#xD;1- Quel est le terme C++ permettant de d√©signer les ‚Äúm√©thodes‚Äù d‚Äôune classe ?&#xA;2- Supposons une classe Cercle disposant d‚Äôun attribut _points de type std::vector&amp;lt;point&amp;gt;. Quel invariant cette classe pourrait-elle d√©cider d‚Äôenforcer ?&#xA;3- Citez une r√®gle permettant de respecter le principe d‚Äôencapsulation en C++.&#xA;4- En quoi consiste la m√©thodologie TDD ?</description>
    </item>
    <item>
      <title>Questionnaire ‚òë</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter3/test/</guid>
      <description>Vous √™tes :&#xD;Votre adresse mail :&#xD;Votre groupe :&#xD;Initiaux 1&#xD;Initiaux 2&#xD;Alternants&#xD;1- Quels sont les avantages et les inconv√©nients de la pile par rapport du tas ?&#xA;2- A quoi sert le mot-clef delete[] ?&#xA;3- Quels sont les deux √©v√©nements qui d√©limitent la dur√©e de vie d‚Äôune donn√©e ?&#xA;4- Qu‚Äôest-ce qu‚Äôune dangling-reference ?&#xA;Donnez un exemple de situation dans lequel on peut en avoir une.</description>
    </item>
    <item>
      <title>Retours ?</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter0/test/</guid>
      <description>Si vous avez rencontr√© des probl√®mes lors de l&amp;rsquo;installation d&amp;rsquo;un des logiciels, n&amp;rsquo;h√©sitez pas √† nous l&amp;rsquo;indiquer, afin que nous puissions am√©liorer nos explications. Merci d&amp;rsquo;avance ! üôÇ&#xA;Vous √™tes :&#xD;Votre adresse mail :&#xD;Votre groupe :&#xD;Initiaux 1&#xD;Initiaux 2&#xD;Alternants&#xD;1- Avez-vous rencontr√© des difficult√©s lors de l‚Äôinstallation d‚Äôun des composants ? Si oui, du ou desquels s‚Äôagit-il ?&#xA;2- Si une erreur est survenue √† un moment, pouvez-vous la copier-coller ci-dessous et indiquer le contexte dans lequel celle-ci a eu lieu ?</description>
    </item>
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter10/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter10/summary/</guid>
      <description>// üößüö•üî® //</description>
    </item>
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter4/summary/</guid>
      <description>Ce qu&amp;rsquo;il faut savoir faire Langage D√©finir une relation de parent√© publique entre deux classes : class Child : public Parent { ... }; D√©finir un membre (fonction ou attribut) accessible uniquement depuis la classe courante et ses enfants : protected : int _a1 = 0; char _a2 = &#39;a&#39;; Appeler le constructeur de la classe parent : Child(int p1, int p2) : Parent { p1 }, _p2 { p2 } { .</description>
    </item>
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter5/summary/</guid>
      <description>Ce qu&amp;rsquo;il faut retenir Th√©orie Un conteneur s√©quentiel est un conteneur dans lequel les √©lements se suivent (tableaux, listes, &amp;hellip;). Un conteneur associatif est un conteneur dans lequel chaque √©l√©ment est index√© par une clef (l&amp;rsquo;√©l√©ment pouvant √™tre la clef elle-m√™me). Les types pass√©s en param√®tre de template doivent parfois respecter des contraintes pour compiler (ces contraintes sont sp√©cifi√©es dans la documentation). Librairie standard Tableau de taille dynamique : vector Tableau de taille fixe : array Listes cha√Æn√©es : list ou forward_list Ensembles : set ou unordered_set Dictionnaires : map ou unordered_map Pratique On peut passer les cha√Ænes de caract√®res constantes par std::string_view plut√¥t que const std::string&amp;amp; ou const char*.</description>
    </item>
    <item>
      <title>FAQ</title>
      <link>https://laefy.github.io/CPP_Learning/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/faq/</guid>
      <description>Pourquoi je n&amp;rsquo;arrive pas √† lancer mon projet avec CMake ? Cela peut-√™tre d√ª √† plusieurs raisons :&#xA;1. Vous n&amp;rsquo;avez pas ouvert le bon dossier dans VSCode. Il faut toujours ouvrir le dossier qui contient tous les chapitres et tous les TPs, pas le dossier d&amp;rsquo;un chapitre ou d&amp;rsquo;un TP en particulier.&#xA;2. Vous avez essay√© de lancer le programme via le menu Run de VSCode. Si vous tentez de lancer un programme de cette mani√®re, VSCode va g√©n√©rer un fichier launch.</description>
    </item>
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter0/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter0/test_done/</guid>
      <description>&#xD;Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ&#xD;N&#39;h√©sitez pas √† nous relancer si vous n&#39;avez pas eu de nouvelles apr√®s une semaine !&#xD;</description>
    </item>
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter10/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter10/test_done/</guid>
      <description>&#xD;Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ&#xD;N&#39;h√©sitez pas √† nous relancer si vous n&#39;avez pas eu de nouvelles apr√®s une semaine !&#xD;</description>
    </item>
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter1/test_done/</guid>
      <description>&#xD;Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ&#xD;N&#39;h√©sitez pas √† nous relancer si vous n&#39;avez pas eu de nouvelles apr√®s une semaine !&#xD;</description>
    </item>
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter2/test_done/</guid>
      <description>&#xD;Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ&#xD;N&#39;h√©sitez pas √† nous relancer si vous n&#39;avez pas eu de nouvelles apr√®s une semaine !&#xD;</description>
    </item>
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter3/test_done/</guid>
      <description>&#xD;Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ&#xD;N&#39;h√©sitez pas √† nous relancer si vous n&#39;avez pas eu de nouvelles apr√®s une semaine !&#xD;</description>
    </item>
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter4/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter4/test_done/</guid>
      <description>&#xD;Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ&#xD;N&#39;h√©sitez pas √† nous relancer si vous n&#39;avez pas eu de nouvelles apr√®s une semaine !&#xD;</description>
    </item>
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter5/test_done/</guid>
      <description>&#xD;Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ&#xD;N&#39;h√©sitez pas √† nous relancer si vous n&#39;avez pas eu de nouvelles apr√®s une semaine !&#xD;</description>
    </item>
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter6/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter6/test_done/</guid>
      <description>&#xD;Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ&#xD;N&#39;h√©sitez pas √† nous relancer si vous n&#39;avez pas eu de nouvelles apr√®s une semaine !&#xD;</description>
    </item>
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter8/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter8/test_done/</guid>
      <description>&#xD;Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ&#xD;N&#39;h√©sitez pas √† nous relancer si vous n&#39;avez pas eu de nouvelles apr√®s une semaine !&#xD;</description>
    </item>
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter9/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter9/test_done/</guid>
      <description>&#xD;Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ&#xD;N&#39;h√©sitez pas √† nous relancer si vous n&#39;avez pas eu de nouvelles apr√®s une semaine !&#xD;</description>
    </item>
    <item>
      <title>Question Submitted</title>
      <link>https://laefy.github.io/CPP_Learning/question-submitted/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/question-submitted/</guid>
      <description>&#xD;</description>
    </item>
    <item>
      <title>Slides</title>
      <link>https://laefy.github.io/CPP_Learning/slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/slides/</guid>
      <description>Ci-dessous, vous trouverez le lien pour t√©l√©charger les slides de chaque s√©ance de cours magistraux.&#xA;Cours 1 </description>
    </item>
    <item>
      <title>Workflow</title>
      <link>https://laefy.github.io/CPP_Learning/workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/workflow/</guid>
      <description>Afin de pouvoir mettre en place votre environnement de travail rapidement, vous pouvez suivre les √©tapes ci-dessous.&#xA;R√©cup√©rer le d√©p√¥t Git du cours et des TPs Forkez le d√©p√¥t https://github.com/Laefy/CPP_Learning_Code/. Ouvrez une nouvelle fen√™tre dans VSCode et cliquez sur &amp;ldquo;clone repository&amp;hellip;&amp;rdquo; Copiez le lien de votre d√©p√¥t cr√©√© par le fork. Collez ce lien dans la fen√™tre de VSCode et s√©lectionnez &amp;ldquo;Clone from URL&amp;rdquo;. Choisissez le r√©pertoire dans lequel le d√©p√¥t sera clon√©.</description>
    </item>
  </channel>
</rss>
