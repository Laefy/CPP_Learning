<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Accueil on Cours de C&#43;&#43; - Niveau Master</title>
    <link>https://laefy.github.io/CPP_Learning/</link>
    <description>Recent content in Accueil on Cours de C&#43;&#43; - Niveau Master</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Nov 2020 19:34:19 +0100</lastBuildDate><atom:link href="https://laefy.github.io/CPP_Learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello World</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/3-practice/1-hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/3-practice/1-hello-world/</guid>
      <description>Pour votre premier programme, on ne va pas trop faire dans l&amp;rsquo;originalit√©, il s&amp;rsquo;agira d&amp;rsquo;un Hello World. Vous l&amp;rsquo;avez d&amp;rsquo;ailleurs d√©j√† probablement vu dans la rubrique pr√©c√©dente, pour tester vos outils.
 Pour cet exercice, vous modifierez le fichier :
- chap-01/1-hello_world.cpp
La cible √† compiler est c1-1-hello_world.
 La fonction main Tout d&amp;rsquo;abord, commen√ßons par √©crire la fonction qui est appel√©e lorsqu&amp;rsquo;on lance le programme. On parle de point d&amp;rsquo;entr√©e.</description>
    </item>
    
    <item>
      <title>Pr√©sentation du langage</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/1-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/1-language/</guid>
      <description>Cette page vous pr√©sentera quelques caract√©ristiques du C++, les diff√©rences avec d&amp;rsquo;autres langages que vous avez √©tudi√©s jusque l√†, pourquoi est-ce que certains disent que C++ est compliqu√©, alors que pas forc√©ment, et ce qui fait que le langage est aussi utilis√© aujourd&amp;rsquo;hui. Promis, c&amp;rsquo;est la seule page du cours o√π vous trouverez autant de pav√©s üôÇ
 Quelques caract√©ristiques C++ est un langage de programmation informatique invent√© dans les ann√©es 1980 par un informaticien nomm√© Bjarne Stroupstrup.</description>
    </item>
    
    <item>
      <title>Visual Studio Code</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/2-tools/1-vscode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/2-tools/1-vscode/</guid>
      <description>Pour l&amp;rsquo;IDE, nous vous conseillons d&amp;rsquo;utiliser Visual Studio Code, car celui-ci est disponible sur toutes les plateformes (contrairement √† Visual Studio tout court), qu&amp;rsquo;il est tr√®s bien document√© et que vous pourrez trouvez de nombreux tutoriels en ligne pour apprendre √† l&amp;rsquo;utiliser.
Vous trouverez ci-dessous les instructions permettant d&amp;rsquo;installer VSCode et un compilateur (g++ pour Windows et Linux, clang pour MacOS), de compiler un programme et de l&amp;rsquo;ex√©cuter depuis VSCode.</description>
    </item>
    
    <item>
      <title>CMake</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/2-tools/2-cmake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/2-tools/2-cmake/</guid>
      <description>Afin de g√©n√©rer les art√©facts pour la compilation, nous utiliserons CMake.
 Installation Si vous √™tes sous Unix, vous devriez pouvoir installer CMake depuis votre gestionnaire de paquets.
Si vous √™tes sous Windows, vous pouvez t√©l√©charger l&amp;rsquo;installeur que vous trouverez sur cette page.
 Int√©gration √† VSCode Afin de pouvoir utiliser CMake facilement depuis VSCode, il faut installer les extensions CMake et CMakeTools.
1- D√©marrez VSCode.
2- Ouvrez le panneau des extensions et recherchez les extensions CMake et CMakeTools.</description>
    </item>
    
    <item>
      <title>Perroquet</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/3-practice/2-parrot.fd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/3-practice/2-parrot.fd/</guid>
      <description>Vous allez maintenant impl√©menter un perroquet, qui r√©p√®te ce que vous dites dans la console.
 Pour cet exercice, vous modifierez le fichier :
- chap-01/2-parrot.cpp
La cible √† compiler est c1-2-parrot.
 Lire un entier Commencez par √©crire une fonction main qui ne fait rien, comme dans l&amp;rsquo;exercice pr√©c√©dent. Compilez et ex√©cutez le programme, pour √™tre s√ªr que tout est bien configur√©.
Ensuite, vous allez d√©clarer une variable de type int.</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/2-tools/3-git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/2-tools/3-git/</guid>
      <description>Pour le gestionnaire de version, nous utiliserons git. Vous pourrez ensuite h√©berger votre d√©p√¥t pour les TPs et le projet sur la plateforme de votre choix (Github, Gitlab, Bitbucket, votre serveur perso, peu importe), du moment que l&amp;rsquo;on peut y avoir acc√®s pour l&amp;rsquo;√©valuation.
 Installation Si vous √™tes sous Unix, vous devriez pouvoir installer git depuis votre gestionnaire de paquets.
Si vous √™tes sous Windows, vous pouvez t√©l√©charger l&amp;rsquo;outil depuis cette page.</description>
    </item>
    
    <item>
      <title>Tableau Num√©rique</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/3-practice/3-array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/3-practice/3-array/</guid>
      <description>Le but de cet exercice est de voir comment manipuler les tableaux en C++ et passer des arguments au programme. Votre objectif sera d&amp;rsquo;afficher un tableau de nombres, dont la taille sera d√©finie par les param√®tres pass√©s au programme.
 Pour cet exercice, vous modifierez le fichier :
- chap-01/3-array.cpp
La cible √† compiler est c1-3-array.
 Tableau statique Le code initial de l&amp;rsquo;exercice vous est fourni. Le voici :</description>
    </item>
    
    <item>
      <title>Calculette</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/3-practice/4-calculator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/3-practice/4-calculator/</guid>
      <description>Dans cet exercice, vous refactoriserez le code d&amp;rsquo;une mini-calculette. Cela sera l&amp;rsquo;occasion de voir l&amp;rsquo;instruction switch, les fonctions et le passage de param√®tres par r√©f√©rence.
 Pour cet exercice, vous modifierez le fichier :
- chap-01/4-calculator.cpp
La cible √† compiler est c1-4-calculator.
 Comprendre le code existant Commen√ßons par parcourir le code fourni, afin de comprendre ce qu&amp;rsquo;il s&amp;rsquo;y passe.
int main(int argc, char** argv) { // Parsing program parameters.  some code.</description>
    </item>
    
    <item>
      <title>Compilation &amp; Ex√©cution</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/2-tools/4-compilation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/2-tools/4-compilation/</guid>
      <description>Nous allons maintenant voir comment compiler un programme avec nos diff√©rents outils.
 Depuis un terminal Sans CMake (petit projet) Avec g++ :
g++f1.cpp f2.cpp f3.cpp -o program Avec clang :
clang++f1.cpp f2.cpp f3.cpp -o program Vous pouvez ajouter des options de compilation (voir plus bas) √† la fin de la ligne de commande.
Avec CMake Commencez par vous placer dans le r√©pertoire qui contiendra les fichiers temporaires g√©n√©r√©s par la compilation (un dossier build/ dans ou √†-c√¥t√© du r√©pertoire de sources par exemple), puis ex√©cutez la commande suivante :</description>
    </item>
    
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/form/</guid>
      <description>F√©licitations !! Vous avez enfin termin√© le Chapitre 1 ! Vous aviez l&amp;rsquo;impression qu&amp;rsquo;il n&amp;rsquo;en finirait jamais, qu&amp;rsquo;il aspirerait votre √¢me dans des m√©andres t√©n√©breux, mais c&amp;rsquo;est bon, vous l&amp;rsquo;avez terrass√© ü•≥üéâ
 Avant de nous quitter pour aller savourer ce moment, vous devriez profiter que le chapitre soit bien frais dans votre t√™te pour r√©pondre au questionnaire ci-dessous. Nous vous rappelons que si vous √™tes en M1 √† l&amp;rsquo;UGE, il participera √† votre notation.</description>
    </item>
    
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/summary/</guid>
      <description>Ce qu&amp;rsquo;il faut retenir Th√©orie  C++ est un langage compil√©, performant, document√©, standardis√© et disposant d&amp;rsquo;une large communaut√©. Il est verbeux et sa syntaxe font qu&amp;rsquo;il ne s&amp;rsquo;agit pas du langage le plus agr√©able √† lire. Une r√©f√©rence est une variable qui pointe sur la m√™me zone de m√©moire qu&amp;rsquo;une autre variable.  M√©thodologie  Lorsqu&amp;rsquo;on a besoin d&amp;rsquo;une fonction, on commence par aller voir sur Internet si elle n&amp;rsquo;existe pas d√©j√† dans la librairie standard.</description>
    </item>
    
  </channel>
</rss>
