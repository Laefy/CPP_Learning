<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gestion des ressources on Cours de C&#43;&#43; - Niveau Master</title>
    <link>https://laefy.github.io/CPP_Learning/chapter5/</link>
    <description>Recent content in Gestion des ressources on Cours de C&#43;&#43; - Niveau Master</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://laefy.github.io/CPP_Learning/chapter5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dur√©e de vie</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/1-lifespan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter5/1-lifespan/</guid>
      <description>Pour cet exercice, vous modifierez les fichiers :
- chap-05/1-teachers/DataBase.cpp
- chap-05/1-teachers/DataBase.h
La cible √† compiler est c5-1-teachers.
 D√©finition La dur√©e de vie d&amp;rsquo;une ressource (bloc de m√©moire, flux, connection r√©seau, etc) correspond √† la p√©riode durant laquelle cette ressource est valide.
Le C++ est un langage dans lequel nous avons la main sur la dur√©e de vie de nos ressources. Dans le cas d&amp;rsquo;un objet, sa dur√©e de vie s&amp;rsquo;√©tend de sa construction √† sa destruction.</description>
    </item>
    
    <item>
      <title>Ownership</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/2-ownership/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter5/2-ownership/</guid>
      <description>Pour cet exercice, vous modifierez les fichiers :
- chap-05/2-pokemons/Journey.cpp
- chap-05/2-pokemons/PC.h
- chap-05/2-pokemons/PokeCenter.h
- chap-05/2-pokemons/Pokedex.h
- chap-05/2-pokemons/Pokemon.h
- chap-05/2-pokemons/ProfessorOak.h
- chap-05/2-pokemons/Trainer.h
La cible √† compiler est c5-2-pokemons.
 Le terme &amp;ldquo;propri√©t√©&amp;rdquo; est tout √† fait valide pour parler d&#39;&amp;ldquo;ownership&amp;rdquo;, mais nous utiliserons de pr√©f√©rence ce dernier, car &amp;ldquo;propri√©t√©&amp;rdquo; peut aussi √™tre utilis√© pour d√©signer les &amp;ldquo;attributs&amp;rdquo; d&amp;rsquo;un objet.
 Un probl√®me d&amp;rsquo;architecture Comme vous l&amp;rsquo;avez vu dans l&amp;rsquo;exercice pr√©c√©dent, afin de pouvoir lib√©rer une ressource, il faut d&amp;rsquo;abord pr√©venir tous les objets qui la r√©f√©rencent que celle-ci va √™tre d√©truite.</description>
    </item>
    
    <item>
      <title>Pointeurs intelligents</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/3-smart-ptrs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter5/3-smart-ptrs/</guid>
      <description>Maintenant que vous savez ce √† quoi correspond l&amp;rsquo;ownership, nous allons vous pr√©sentez les smart pointers.
 Ownership simple Pour cet exercice, vous modifierez les fichiers :
- chap-05/2-pokemons/Journey.cpp
- chap-05/2-pokemons/PC.h
- chap-05/2-pokemons/PokeCenter.h
- chap-05/2-pokemons/Pokedex.h
- chap-05/2-pokemons/Pokemon.h
- chap-05/2-pokemons/ProfessorOak.h
- chap-05/2-pokemons/Trainer.h
La cible √† compiler est c5-2-pokemons.
 En g√©n√©ral, on peut s&amp;rsquo;arranger pour qu&amp;rsquo;√† tout instant de l&amp;rsquo;ex√©cution d&amp;rsquo;un programme, chacune des ressources ait un unique propri√©taire. C&amp;rsquo;√©tait par exemple le cas dans l&amp;rsquo;exercice pr√©c√©dent : un Pok√©mon pouvait changer de propri√©taire, certes, mais il ne pouvait pas avoir deux propri√©taires au m√™me moment.</description>
    </item>
    
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter5/test/</guid>
      <description>C&amp;rsquo;est l&amp;rsquo;heure du test ! Bon courage üôÇ
 Vous √™tes : Votre adresse mail : 1- Quel est la responsabilit√© du propri√©taire d‚Äôune ressource ?

2- Quelles sont les deux raisons pour lesquelles il faut utiliser des smart pointers plut√¥t que des raw pointers lorsqu‚Äôon veut exprimer la notion d‚Äôownership ?

3- Quels sont les trois smart pointers propos√©s par la STL ? A quoi sert chacun d‚Äôentre eux ?</description>
    </item>
    
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter5/summary/</guid>
      <description>Ce qu&amp;rsquo;il faut retenir Th√©orie  Une ressource est g√©n√©ralement une entit√© que l&amp;rsquo;on demande √† l&amp;rsquo;OS de nous &amp;ldquo;pr√™ter&amp;rdquo;, comme un bloc de m√©moire, un fichier ou encore une connection r√©seau.
Certains objets du programme peuvent √©galement √™tre consid√©r√©s comme des ressources. Une ressource est valide de son acquisition √† sa lib√©ration. La dur√©e de vie d&amp;rsquo;une ressource fait r√©f√©rence est cette p√©riode de validit√©. RAII : technique qui consiste √† s&amp;rsquo;assurer qu&amp;rsquo;une ressource sera bien lib√©r√©e, en l&amp;rsquo;associant √† un objet (smart pointer, conteneur STL, &amp;hellip;).</description>
    </item>
    
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter5/test_done/</guid>
      <description>Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ Retourner √† la synth√®se du Chapitre</description>
    </item>
    
  </channel>
</rss>
