<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gestion des ressources on Cours de C&#43;&#43; - Niveau Master</title>
    <link>https://laefy.github.io/CPP_Learning/chapter5/</link>
    <description>Recent content in Gestion des ressources on Cours de C&#43;&#43; - Niveau Master</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://laefy.github.io/CPP_Learning/chapter5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Durée de vie</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/1-lifespan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter5/1-lifespan/</guid>
      <description>Pour cet exercice, vous modifierez les fichiers :
- chap-05/1-teachers/DataBase.cpp
- chap-05/1-teachers/DataBase.h
La cible à compiler est c5-1-teachers.
 Définition La durée de vie d&amp;rsquo;une ressource (bloc de mémoire, flux, connection réseau, etc) correspond à la période durant laquelle cette ressource est valide.
Le C++ est un langage dans lequel nous avons la main sur la durée de vie de nos ressources. Dans le cas d&amp;rsquo;un objet, sa durée de vie s&amp;rsquo;étend de sa construction à sa destruction.</description>
    </item>
    
    <item>
      <title>Ownership</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/2-ownership/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter5/2-ownership/</guid>
      <description>Pour cet exercice, vous modifierez les fichiers :
- chap-05/2-pokemons/Journey.cpp
- chap-05/2-pokemons/PC.h
- chap-05/2-pokemons/PokeCenter.h
- chap-05/2-pokemons/Pokedex.h
- chap-05/2-pokemons/Pokemon.h
- chap-05/2-pokemons/ProfessorOak.h
- chap-05/2-pokemons/Trainer.h
La cible à compiler est c5-2-pokemons.
 Le terme &amp;ldquo;propriété&amp;rdquo; est tout à fait valide pour parler d&#39;&amp;ldquo;ownership&amp;rdquo;, mais nous utiliserons de préférence ce dernier, car &amp;ldquo;propriété&amp;rdquo; peut aussi être utilisé pour désigner les &amp;ldquo;attributs&amp;rdquo; d&amp;rsquo;un objet.
 Un problème d&amp;rsquo;architecture Comme vous l&amp;rsquo;avez vu dans l&amp;rsquo;exercice précédent, afin de pouvoir libérer une ressource, il faut d&amp;rsquo;abord prévenir tous les objets qui la référencent que celle-ci va être détruite.</description>
    </item>
    
    <item>
      <title>Pointeurs intelligents</title>
      <link>https://laefy.github.io/CPP_Learning/chapter5/3-smart-ptrs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter5/3-smart-ptrs/</guid>
      <description>Maintenant que vous savez ce à quoi correspond l&amp;rsquo;ownership, nous allons vous présentez les smart pointers.
 Ownership simple Pour cet exercice, vous modifierez les fichiers :
- chap-05/2-pokemons/Journey.cpp
- chap-05/2-pokemons/PC.h
- chap-05/2-pokemons/PokeCenter.h
- chap-05/2-pokemons/Pokedex.h
- chap-05/2-pokemons/Pokemon.h
- chap-05/2-pokemons/ProfessorOak.h
- chap-05/2-pokemons/Trainer.h
La cible à compiler est c5-2-pokemons.
 En général, on peut s&amp;rsquo;arranger pour qu&amp;rsquo;à tout instant de l&amp;rsquo;exécution d&amp;rsquo;un programme, chacune des ressources ait un unique propriétaire. C&amp;rsquo;était par exemple le cas dans l&amp;rsquo;exercice précédent : un Pokémon pouvait changer de propriétaire, certes, mais il ne pouvait pas avoir deux propriétaires au même moment.</description>
    </item>
    
  </channel>
</rss>
