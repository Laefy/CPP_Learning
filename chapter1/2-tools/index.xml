<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Outils on Cours de C&#43;&#43; - Niveau Master</title>
    <link>https://laefy.github.io/CPP_Learning/chapter1/2-tools/</link>
    <description>Recent content in Outils on Cours de C&#43;&#43; - Niveau Master</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://laefy.github.io/CPP_Learning/chapter1/2-tools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Visual Studio Code</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/2-tools/1-vscode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/2-tools/1-vscode/</guid>
      <description>Pour l&amp;rsquo;IDE, nous vous conseillons d&amp;rsquo;utiliser Visual Studio Code, car celui-ci est disponible sur toutes les plateformes (contrairement à Visual Studio tout court), qu&amp;rsquo;il est très bien documenté et que vous pourrez trouvez de nombreux tutoriels en ligne pour apprendre à l&amp;rsquo;utiliser.
Vous trouverez ci-dessous les instructions permettant d&amp;rsquo;installer VSCode et un compilateur (g++ pour Windows et Linux, clang pour MacOS), de compiler un programme et de l&amp;rsquo;exécuter depuis VSCode.</description>
    </item>
    
    <item>
      <title>CMake</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/2-tools/2-cmake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/2-tools/2-cmake/</guid>
      <description>Afin de générer les artéfacts pour la compilation, nous utiliserons CMake.
 Installation Si vous êtes sous Unix, vous devriez pouvoir installer CMake depuis votre gestionnaire de paquets.
Si vous êtes sous Windows, vous pouvez télécharger l&amp;rsquo;installeur que vous trouverez sur cette page.
 Intégration à VSCode Afin de pouvoir utiliser CMake facilement depuis VSCode, il faut installer les extensions CMake et CMakeTools.
1- Démarrez VSCode.
2- Ouvrez le panneau des extensions et recherchez les extensions CMake et CMakeTools.</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/2-tools/3-git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/2-tools/3-git/</guid>
      <description>Pour le gestionnaire de version, nous utiliserons git. Vous pourrez ensuite héberger votre dépôt pour les TPs et le projet sur la plateforme de votre choix (Github, Gitlab, Bitbucket, votre serveur perso, peu importe), du moment que l&amp;rsquo;on peut y avoir accès pour l&amp;rsquo;évaluation.
 Installation Si vous êtes sous Unix, vous devriez pouvoir installer git depuis votre gestionnaire de paquets.
Si vous êtes sous Windows, vous pouvez télécharger l&amp;rsquo;outil depuis cette page.</description>
    </item>
    
    <item>
      <title>Compilation &amp; Exécution</title>
      <link>https://laefy.github.io/CPP_Learning/chapter1/2-tools/4-compilation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter1/2-tools/4-compilation/</guid>
      <description>Nous allons maintenant voir comment compiler un programme avec nos différents outils.
Vous n&amp;rsquo;êtes pas obligé de connaître toutes les méthodes présentées ci-dessous, ce qui compte, c&amp;rsquo;est que vous puissiez compiler et lancer vos programmes d&amp;rsquo;une manière ou d&amp;rsquo;une autre.
 Depuis un terminal Sans CMake (petit projet) Avec g++ :
g++f1.cpp f2.cpp f3.cpp -o program Avec clang :
clang++f1.cpp f2.cpp f3.cpp -o program Vous pouvez ajouter des options de compilation (voir plus bas) à la fin de la ligne de commande.</description>
    </item>
    
  </channel>
</rss>
