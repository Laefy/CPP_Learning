<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Classes on Cours de C&#43;&#43; - Niveau Master</title>
    <link>https://laefy.github.io/CPP_Learning/chapter2/</link>
    <description>Recent content in Classes on Cours de C&#43;&#43; - Niveau Master</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <atom:link href="https://laefy.github.io/CPP_Learning/chapter2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#39;est quoi un objet d√©j√† ?</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/1-poo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter2/1-poo/</guid>
      <description>Commen√ßons par donner quelques rappels des notions de POO que vous avez pu voir l&amp;rsquo;an dernier.&#xA;Objet Dans un programme, un objet est un √©l√©ment constitu√© d&amp;rsquo;un √©tat, et disposant d&amp;rsquo;une interface permettant d&amp;rsquo;int√©ragir avec cet √©tat.&#xA;Classe Un objet est g√©n√©ralement cr√©√© √† partir d&amp;rsquo;un mod√®le, que l&amp;rsquo;on appelle classe. Un objet cr√©√© √† partir d&amp;rsquo;une classe constitue une instance de cette classe.&#xA;Etat L&amp;rsquo;√©tat d&amp;rsquo;un objet est compos√© de valeurs, pouvant ou non varier au cours de l&amp;rsquo;ex√©cution du programme.</description>
    </item>
    <item>
      <title>Premi√®re classe ‚ú®</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/2-first-class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter2/2-first-class/</guid>
      <description>C&amp;rsquo;est parti pour la pratique ! Vous allez ici apprendre √† d√©finir une classe en C++ et √† l&amp;rsquo;instancier.&#xA;Commencez par ouvrir le d√©p√¥t d&amp;rsquo;exercices dans VSCode.&#xA;M√©thodologie Ouvrez le fichier chap-02/1-first_class.cpp, dans lequel on vous fournit le code de la fonction main.&#xA;int main() { // Person p; // p.set_name(&amp;#34;Batman&amp;#34;); // p.set_age(23); // std::cout &amp;lt;&amp;lt; &amp;#34;Person named &amp;#39;&amp;#34; &amp;lt;&amp;lt; p.get_name() &amp;lt;&amp;lt; &amp;#34;&amp;#39; is &amp;#34; &amp;lt;&amp;lt; p.get_age() &amp;lt;&amp;lt; &amp;#34; years old.</description>
    </item>
    <item>
      <title>Constructeur üî®</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/3-constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter2/3-constructor/</guid>
      <description>Dans cet exercice, vous apprendrez √† param√©trer la construction de vos objets.&#xA;Constructeur √† param√®tres Ouvrez le fichier chap-02/2-constructor.cpp. Il contient une correction de l&amp;rsquo;exercice pr√©c√©dent.&#xA;Vous aviez impl√©ment√© une fonction-membre set_name dans la classe Person pour initialiser l&amp;rsquo;attribut _name. Or, ce serait bien d&amp;rsquo;une part de r√©ellement pouvoir initialiser cet attribut plut√¥t que de le modifier apr√®s l&amp;rsquo;instanciation, et d&amp;rsquo;autre part, de supprimer ce setter, afin qu&amp;rsquo;une fois initialis√©, il ne soit plus possible de modifier _name.</description>
    </item>
    <item>
      <title>Destructeur üí£</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/4-destructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter2/4-destructor/</guid>
      <description>Si le constructeur est la fonction qui permet de d√©finir ce qu&amp;rsquo;il se passe lorsqu&amp;rsquo;un objet est instanci√©, vous vous doutez probablement que le destructeur est la fonction qui permet de d√©finir ce qu&amp;rsquo;il se passe lorsqu&amp;rsquo;un objet est &amp;ldquo;d√©sinstanci√©&amp;rdquo;.&#xA;Sur cette page, nous vous expliquerons d&amp;rsquo;abord o√π se produit la d√©sinstanciation d&amp;rsquo;un objet, et nous vous montrerons ensuite comment d√©finir son destructeur.&#xA;D√©sinstanciation, kesako ?? La d√©sinstanciation, c&amp;rsquo;est tout simplement le contraire de l&amp;rsquo;instanciation.</description>
    </item>
    <item>
      <title>Modularit√© üß±</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/5-modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter2/5-modules/</guid>
      <description>Cet exercice vous permettra de d√©couvrir :&#xA;comment √©crire des headers en C++, comment extraire l&amp;rsquo;impl√©mentation des fonctions d&amp;rsquo;une classe en dehors de cette classe, √† quoi correspondent les membres statiques d&amp;rsquo;une classe et comment les d√©finir, comment d√©l√©guer un appel √† un autre constructeur. S√©parer l&amp;rsquo;impl√©mentation des fonctions-membre Ouvrez le dossier chap-02/4-modules. Celui-ci est compos√© de 3 fichiers :&#xA;main.cpp, qui contient une fonction main d√©j√† √©crite Rectangle.h, qui contient une classe Rectangle, Rectangle.</description>
    </item>
    <item>
      <title>Op√©rateurs ‚ûó</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/6-polygon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter2/6-polygon/</guid>
      <description>Sur cette page, nous vous montrerons comment impl√©menter vos propres op√©rateurs.&#xA;Nous en profiterons aussi pour vous expliquer comment d√©finir un alias de type et comment d√©finir des fonctions amies.&#xA;D√©finition Un op√©rateur est une fonction, mais qui peut √™tre appel√©e avec une syntaxe &amp;ldquo;simplifi√©e&amp;rdquo;.&#xA;Prenons l&amp;rsquo;exemple de la concat√©nation de std::string :&#xA;auto a = std::string { &amp;#34;a&amp;#34; }; auto b = std::string { &amp;#34;b&amp;#34; }; auto ab = a + b; Dans le code ci-dessus, l&amp;rsquo;expression a + b est en fait un appel √† une fonction dont la signature est quelque chose comme: operator+(std::string, std::string).</description>
    </item>
    <item>
      <title>Questionnaire ‚òë</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter2/test/</guid>
      <description>Vous √™tes :&#xD;Votre adresse mail :&#xD;Votre groupe :&#xD;Initiaux 1&#xD;Initiaux 2&#xD;Alternants&#xD;1- Quel est le terme C++ permettant de d√©signer les ‚Äúm√©thodes‚Äù d‚Äôune classe ?&#xA;2- Supposons une classe Cercle disposant d‚Äôun attribut _points de type std::vector&amp;lt;point&amp;gt;. Quel invariant cette classe pourrait-elle d√©cider d‚Äôenforcer ?&#xA;3- Citez une r√®gle permettant de respecter le principe d‚Äôencapsulation en C++.&#xA;4- En quoi consiste la m√©thodologie TDD ?</description>
    </item>
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter2/test_done/</guid>
      <description>&#xD;Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ&#xD;N&#39;h√©sitez pas √† nous relancer si vous n&#39;avez pas eu de nouvelles apr√®s une semaine !&#xD;</description>
    </item>
  </channel>
</rss>
