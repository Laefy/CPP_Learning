<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Classes on Cours de C&#43;&#43; - Niveau Master</title>
    <link>https://laefy.github.io/CPP_Learning/chapter2/</link>
    <description>Recent content in Classes on Cours de C&#43;&#43; - Niveau Master</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Nov 2020 19:34:19 +0100</lastBuildDate><atom:link href="https://laefy.github.io/CPP_Learning/chapter2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#39;est quoi un objet d√©j√† ?</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/1-poo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/1-poo/</guid>
      <description>Commen√ßons par donner quelques rappels des notions de POO que vous avez pu voir l&amp;rsquo;an dernier.
 Objet Dans un programme, un objet est un √©l√©ment constitu√© d&amp;rsquo;un √©tat, et disposant d&amp;rsquo;une interface permettant d&amp;rsquo;int√©ragir avec cet √©tat.
Classe Un objet est g√©n√©ralement cr√©√© √† partir d&amp;rsquo;un mod√®le, que l&amp;rsquo;on appelle classe. Un objet cr√©√© √† partir d&amp;rsquo;une classe constitue une instance de cette classe.
Etat L&amp;rsquo;√©tat d&amp;rsquo;un objet est un ensemble de valeurs, pouvant ou non varier au cours de l&amp;rsquo;ex√©cution du programme.</description>
    </item>
    
    <item>
      <title>‚ú® Premi√®re classe</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/2-first-class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/2-first-class/</guid>
      <description>C&amp;rsquo;est parti pour la pratique ! Vous allez ici apprendre √† d√©finir une classe en C++ et √† l&amp;rsquo;instancier.
 Pour cet exercice, vous modifierez le fichier :
- chap-02/1-first_class.cpp
La cible √† compiler est c2-1-first_class.
 M√©thodologie Pour cet exercice, on vous fournit le code de la fonction main.
int main() { // Person p;  // p.set_name(&amp;#34;Batman&amp;#34;);  // p.set_age(23);  // std::cout &amp;lt;&amp;lt; &amp;#34;Person named &amp;#39;&amp;#34; &amp;lt;&amp;lt; p.</description>
    </item>
    
    <item>
      <title>üî® Constructeur</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/3-constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/3-constructor/</guid>
      <description>Dans cet exercice, vous apprendrez √† param√©trer la construction de vos objets.
 Pour cet exercice, vous modifierez le fichier :
- chap-02/2-constructor.cpp
La cible √† compiler est c2-2-constructor.
 Constructeur √† param√®tres Reprenez le code de l&amp;rsquo;exercice pr√©c√©dent.
Vous aviez impl√©ment√© une fonction-membre set_name dans la classe Person pour initialiser l&amp;rsquo;attribut _name. Or, ce serait bien d&amp;rsquo;une part de r√©ellement pouvoir initialiser cet attribut plut√¥t que de le modifier apr√®s l&amp;rsquo;instanciation, et d&amp;rsquo;autre part, de supprimer ce setter, afin qu&amp;rsquo;une fois initialis√©, il ne soit plus possible de modifier _name.</description>
    </item>
    
    <item>
      <title>üß¨ Cl√¥ne</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/4-clone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/4-clone/</guid>
      <description>Dans cet exercice, vous verrez comment impl√©menter un constructeur de copie et un op√©rateur d&amp;rsquo;assignation.
Nous en profiterons aussi pour vous montrer comment surcharger l&amp;rsquo;op√©rateur &amp;lt;&amp;lt;.
 Pour cet exercice, vous modifierez le fichier :
- chap-02/3-clone.cpp
La cible √† compiler est c2-3-clone.
 Constructeur de copie Dans la fonction main, instanciez √† la suite du code existant une nouvelle instance de Person et initialis√©e l√† √† partir de la variable batman.</description>
    </item>
    
    <item>
      <title>üî≥ Rectangle</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/5-rectangle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/5-rectangle/</guid>
      <description>Cet exercice vous permettra de d√©couvrir :
 comment √©crire des headers en C++, comment extraire l&amp;rsquo;impl√©mentation des fonctions d&amp;rsquo;une classe en dehors de cette classe, √† quoi correspondent les membres statiques d&amp;rsquo;une classe et comment les d√©finir, comment d√©l√©guer un appel √† un autre constructeur.   Pour cet exercice, vous modifierez les fichiers :
- chap-02/4-rectangle/main.cpp
- chap-02/4-rectangle/Rectangle.cpp
- chap-02/4-rectangle/Rectangle.h
La cible √† compiler est c2-4-rectangle.
 Header en C++ Vous commencez l&amp;rsquo;exercice avec une fonction main dans le fichier main.</description>
    </item>
    
    <item>
      <title>üí† Polyg√¥ne</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/6-polygon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/6-polygon/</guid>
      <description>Dans cet exercice, vous impl√©menterez votre premier destructeur. Vous y d√©couvrirez aussi la notion d&amp;rsquo;alias et le m√©canisme d&amp;rsquo;amiti√©.
Pour terminer, vous serez confront√© √† votre premi√®re &amp;ldquo;dangling reference&amp;rdquo;.
 Pour cet exercice, vous modifierez les fichiers :
- chap-02/5-polygon/main.cpp
- chap-02/CMakeLists.txt
Et vous ajouterez les fichiers :
- chap-02/5-polygon/Polygon.h
- chap-02/5-polygon/Polygon.cpp
La cible √† compiler est c2-5-polygon.
 Pr√©sentation de l&amp;rsquo;exercice Pour cet exercice, vous utiliserez la m√™me m√©thodologie que pour l&amp;rsquo;exercice first-class :</description>
    </item>
    
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/form/</guid>
      <description>Vous pensiez que le Chapitre 2 serait plus l√©ger que le Chapitre 1 ? D√©sol√©e de vous avoir d√©√ßus üòÖ
Mais bon, vous l&amp;rsquo;avez enfin termin√©, donc vous pouvez √™tre fiers de vous ! üòÄ
 Avant de nous quitter pour aller savourer ce moment, vous devriez profiter que le chapitre soit bien frais dans votre t√™te pour r√©pondre au questionnaire ci-dessous. Nous vous rappelons que si vous √™tes en M1 √† l&amp;rsquo;UGE, il participera √† votre notation.</description>
    </item>
    
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter2/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter2/summary/</guid>
      <description>Ce qu&amp;rsquo;il faut retenir Th√©orie  A quoi correspondent les termes attributs et fonction-membres constructeur = fonction appel√©e √† l&amp;rsquo;instanciation d&amp;rsquo;une classe constructeur par d√©faut = constructeur √† 0 param√®tre impl√©mentation par d√©faut = impl√©mentation d&amp;rsquo;une fonction g√©n√©r√©e par le compilateur dans certaines conditions op√©rateur d&amp;rsquo;assignation = fonction appel√©e lorsque l&amp;rsquo;on √©crit a = ...;, sachant que a a √©t√© instanci√© plus t√¥t destructeur = fonction appel√©e √† la destruction d&amp;rsquo;un objet surcharge = fonction de m√™me nom, acceptant un nombre diff√©rent de param√®tres et/ou des param√®tres de types diff√©rents Lorsque la variable r√©f√©renc√©e par une r√©f√©rence est d√©truite, on a une dangling reference  Pratique  Utiliser this pour faire r√©f√©rence √† l&amp;rsquo;instance courante Comparer this et &amp;amp;other au d√©but de l&amp;rsquo;op√©rateur d&amp;rsquo;assignation Utiliser const aussi souvent que possible   Ce qu&amp;rsquo;il faut savoir faire Langage  D√©finir une classe : class A {}; (sans oublier le point-virgule) D√©finir des attributs et des fonctions-membres Indiquer la visibilit√© d&amp;rsquo;un ou plusieurs membres : public: - private: D√©finir un constructeur : ClassName(int p1, char p2) : _a1 { p1 }, _a2 { p2 } { } D√©l√©guer la construction √† un autre constructeur : ClassName(int p) : ClassName { p, p } {} D√©finir un constructeur de copie : ClassName(const ClassName&amp;amp; other) : _a1 { other.</description>
    </item>
    
  </channel>
</rss>
