<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cycle de vie on Cours de C&#43;&#43; - Niveau Master</title>
    <link>https://laefy.github.io/CPP_Learning/chapter3/</link>
    <description>Recent content in Cycle de vie on Cours de C&#43;&#43; - Niveau Master</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <atom:link href="https://laefy.github.io/CPP_Learning/chapter3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Allocation dynamique üéá</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/1-allocation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter3/1-allocation/</guid>
      <description>Cette premi√®re page sera assez courte, elle vous pr√©sentera simplement la syntaxe permettant d&amp;rsquo;allouer dynamiquement de la m√©moire et de la lib√©rer.&#xA;Allouer un seul √©l√©ment Pour allouer un bloc de m√©moire, on utilise le mot-clef new, suivi du type de donn√©e que l&amp;rsquo;on souhaite y placer, puis de la valeur avec laquelle on souhaite l&amp;rsquo;initialiser.&#xA;Cette instruction retourne un pointeur.&#xA;int* ptr_5 = new int { 5 }; std::cout &amp;lt;&amp;lt; *ptr_5 &amp;lt;&amp;lt; std::endl; // --&amp;gt; 5 Comme pour une variable classique, on peut utiliser des {} ou des () pour indiquer la valeur initiale.</description>
    </item>
    <item>
      <title>Dur√©e de vie ‚è≥</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/2-lifespan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter3/2-lifespan/</guid>
      <description>Nous allons maintenant revenir sur l&amp;rsquo;instanciation et la d√©sinstanciation des donn√©es, car ce sont les deux √©v√©nements qui d√©limitent leur p√©riode de validit√©.&#xA;Donn√©e de type fondamental L&amp;rsquo;instanciation d&amp;rsquo;une donn√©e de type fondamental est constitu√© de deux phases.&#xA;Le programme alloue l&amp;rsquo;espace n√©cessaire pour stocker la donn√©e. Si sp√©cifi√© par le programmeur, le contenu de la donn√©e est initialis√©. En ce qui concerne la d√©sinstanciation, le programme d√©salloue l&amp;rsquo;espace r√©serv√© pour la donn√©e.</description>
    </item>
    <item>
      <title>Espace de stockage üíæ</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/3-storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter3/3-storage/</guid>
      <description>Sur cette page, nous rappelerons ce que sont les variables et les pointeurs, et comment ils peuvent √™tre repr√©sent√©s en m√©moire, puis nous ferons de m√™me pour les r√©f√©rences.&#xA;Nous pr√©senterons ensuite les sp√©cificit√©s des trois zones dans lesquelles le programme alloue de la m√©moire : la m√©moire statique, la pile et le tas.&#xA;Cela vous aidera, j&amp;rsquo;esp√®re, √† visualiser mentalement quelles sont les donn√©es valides du programme.&#xA;Repr√©sentation Variables Une variable est un identifiant permettant d&amp;rsquo;acc√©der √† une donn√©e de taille fixe en m√©moire.</description>
    </item>
    <item>
      <title>Usage des r√©f√©rences üîÄ</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/4-references/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter3/4-references/</guid>
      <description>Comme cela doit para√Ætre encore un peu abstrait, nous allons vous pr√©senter concr√®tement les principaux cas d&amp;rsquo;utilisation des r√©f√©rences. Notez qu&amp;rsquo;il en existe un autre, mais vous le d√©couvrirez dans le chapitre sur l&amp;rsquo;h√©ritage !&#xA;Modifier un argument Le premier cas d&amp;rsquo;utilisation des r√©f√©rences avait d√©j√† √©t√© d√©crit dans le Chapitre 1 : il s&amp;rsquo;agit de pouvoir modifier la valeur ou le contenu d&amp;rsquo;un argument pass√© √† une fonction.&#xA;Pour rappel, lorsque vous passez un objet par valeur en param√®tre d&amp;rsquo;une fonction, l&amp;rsquo;int√©gralit√© de l&amp;rsquo;instance est copi√©e !</description>
    </item>
    <item>
      <title>Ownership üèòÔ∏è</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/5-ownership/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter3/5-ownership/</guid>
      <description>Jusqu&amp;rsquo;ici, nous vous avons expliqu√© que contrairement au Java, les donn√©es que vous instanciez ne restent pas magiquement en vie tant que vous en avez besoin.&#xA;C&amp;rsquo;est donc √† vous de garantir que vos donn√©es ne seront pas d√©sinstanci√©es avant d&amp;rsquo;avoir fini de les utiliser.&#xA;Sur cette page, nous allons introduire le concept d&amp;rsquo;ownership, qui vous aidera √† mieux architecturer votre code pour √©viter de vous retrouver avec des dangling-references.</description>
    </item>
    <item>
      <title>Questionnaire ‚òë</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter3/test/</guid>
      <description>Vous √™tes :&#xD;Votre adresse mail :&#xD;Votre groupe :&#xD;Initiaux 1&#xD;Initiaux 2&#xD;Alternants&#xD;1- Quels sont les avantages et les inconv√©nients de la pile par rapport du tas ?&#xA;2- A quoi sert le mot-clef delete[] ?&#xA;3- Quels sont les deux √©v√©nements qui d√©limitent la dur√©e de vie d‚Äôune donn√©e ?&#xA;4- Qu‚Äôest-ce qu‚Äôune dangling-reference ?&#xA;Donnez un exemple de situation dans lequel on peut en avoir une.</description>
    </item>
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laefy.github.io/CPP_Learning/chapter3/test_done/</guid>
      <description>&#xD;Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ&#xD;N&#39;h√©sitez pas √† nous relancer si vous n&#39;avez pas eu de nouvelles apr√®s une semaine !&#xD;</description>
    </item>
  </channel>
</rss>
