<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Conteneurs standards on Cours de C&#43;&#43; - Niveau Master</title>
    <link>https://laefy.github.io/CPP_Learning/chapter3/</link>
    <description>Recent content in Conteneurs standards on Cours de C&#43;&#43; - Niveau Master</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://laefy.github.io/CPP_Learning/chapter3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Un peu de doc...</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/1-doc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/1-doc/</guid>
      <description>Pour d√©marrez ce chapitre, nous allons vous expliquer comment parcourir la documentation que vous trouverez sur le site cppreference.
Commencez par ouvrir cette page. Vous y trouverez la documentation de la classe vector.
A premi√®re vue, son contenu peut para√Ætre indigeste. Nous allons donc vous expliquer comment il est structur√© afin que vous puissiez vous y rep√©rer plus facilement.
 Documentation d&amp;rsquo;une classe 1. En-t√™te Dans l&amp;rsquo;en-t√™te de la documentation, vous trouverez le nom de la classe, suivi du header √† inclure afin de pouvoir l&amp;rsquo;utiliser.</description>
    </item>
    
    <item>
      <title>Tableaux dynamiques</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/2-vectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/2-vectors/</guid>
      <description>Vous apprendrez ici √† utiliser des vector de mani√®re un peu plus avanc√©e : construction, acc√®s, insertions, suppressions et recherches n&amp;rsquo;auront plus de secrets pour vous !
 Pour cet exercice, vous modifierez le fichier :
- chap-03/1-vectors.cpp
La cible √† compiler est c3-1-vectors.
 Construction Au chapitre pr√©c√©dent, nous vous avions pr√©sent√© diff√©rentes syntaxes permettant d&amp;rsquo;instancier une classe. Nous vous avions en particulier indiquer qu&amp;rsquo;il √©tait possible d&amp;rsquo;utiliser la syntaxe Class c { p1, p2 }; ou bien la syntaxe Class c(p1, p2);.</description>
    </item>
    
    <item>
      <title>Autres conteneurs s√©quentiels</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/3-sequentials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/3-sequentials/</guid>
      <description>Vous allez maintenant manipuler les autres conteneurs s√©quentiels que la libraire propose.
 Pour cet exercice, vous modifierez le fichier :
- chap-03/2-sequentials.cpp
La cible √† compiler est c3-2-sequentials.
 Tableaux de taille fixe Pour cr√©er des tableaux de taille fixe, il est bien entendu possible d&amp;rsquo;utiliser les tableaux primitifs. L&amp;rsquo;inconv√©nient, c&amp;rsquo;est qu&amp;rsquo;il faut penser √† les initialiser, ce que tout le monde ne pense pas toujours √† faire&amp;hellip;.
Du coup, pour pallier √† ce probl√®me, il est possible d&amp;rsquo;utiliser la classe std::array.</description>
    </item>
    
    <item>
      <title>Conteneurs associatifs</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/4-associatives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/4-associatives/</guid>
      <description>Un conteneur associatif est un conteneur dans lequel les √©l√©ments peuvent √™tre index√©s par des objets, et non plus seulement par des entiers.
Vous allez donc ici voir les diff√©rents types de conteneurs associatifs propos√©s par la STL.
 Pour cet exercice, vous modifierez les fichiers :
- chap-03/3-associatives/main.cpp
- chap-03/3-associatives/keys.h
La cible √† compiler est c3-3-associatives.
 Les sets (ensembles) Un set est un conteneur dans lequel les √©l√©ments sont &amp;ldquo;index√©s par eux-m√™mes&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Manipulation de cha√Ænes</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/5-strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/5-strings/</guid>
      <description>Dans cette partie, nous reviendrons sur les fonctions fournies par la librairie permettant de manipuler des string. Vous apprendrez aussi ce que sont les string_view et √† quoi elles servent.
 Pour cet exercice, vous modifierez le fichier :
- chap-03/4-strings.cpp
La cible √† compiler est c3-4-strings.
 Op√©rations standards Parmis les op√©rations standards que l&amp;rsquo;on peut effectuer sur des cha√Ænes de caract√®re, on retrouve :
 la concat√©nation, l&amp;rsquo;extration de sous-cha√Æne, la recherche de caract√®re ou de sous-cha√Æne, la comparaison, le remplacement d&amp;rsquo;une partie de la cha√Æne.</description>
    </item>
    
    <item>
      <title>Paires et tuples</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/6-tuples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/6-tuples/</guid>
      <description>Vous avez d√©j√† utilis√© le type pair au cours d&amp;rsquo;exercices pr√©c√©dents. Nous allons maintenant vous pr√©senter son cousin, la classe tuple.
 Pour cet exercice, vous modifierez le fichier :
- chap-03/5-tuples.cpp
La cible √† compiler est c3-5-tuples.
 Micro rappel sur les pair La classe pair est un type templat√© avec deux param√®tres :
std::pair&amp;lt;int, float&amp;gt; such_a_nice_pair { 1, 3.f }; On acc√®de aux √©l√©ments de la pair directement via ses attributs first et second (pas de getters) :</description>
    </item>
    
    <item>
      <title>Questionnaire !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/test/</guid>
      <description>Le premier objectif de ce chapitre √©tait de vous pr√©senter quelques classes de la STL, leurs r√¥les, leurs diff√©rences, dans quelles situations les utiliser et comment.
Il avait √©galement un deuxi√®me objectif, qui √©tait en quelque sorte de vous apprendre √† vous d√©brouiller tout seul : vous devriez d√©sormais √™tre capable de rechercher par vous-m√™me des informations dans la documentation, et vous devriez aussi appr√©hender un peu mieux qu&amp;rsquo;avant les messages du compilateur.</description>
    </item>
    
    <item>
      <title>Synth√®se</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/summary/</guid>
      <description>Ce qu&amp;rsquo;il faut retenir Th√©orie  Un conteneur s√©quentiel est un conteneur dans lequel les √©lements se suivent (tableaux, listes, &amp;hellip;). Un conteneur associatif est un conteneur dans lequel chaque √©l√©ment est index√© par une clef (l&amp;rsquo;√©l√©ment pouvant √™tre la clef elle-m√™me). Les types pass√©s en param√®tre de template doivent parfois respecter des contraintes pour compiler (ces contraintes sont sp√©cifi√©es dans la documentation).  Librairie standard  Tableau de taille dynamique : vector Tableau de taille fixe : array Listes cha√Æn√©es : list ou forward_list Ensembles : set ou unordered_set Dictionnaires : map ou unordered_map  Pratique  On peut passer les cha√Ænes de caract√®res constantes par std::string_view plut√¥t que const std::string&amp;amp; ou const char*.</description>
    </item>
    
    <item>
      <title>Merci !</title>
      <link>https://laefy.github.io/CPP_Learning/chapter3/test_done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://laefy.github.io/CPP_Learning/chapter3/test_done/</guid>
      <description>Vos r√©ponses nous ont bien √©t√© communiqu√©es üòÉ Retourner √† la synth√®se du Chapitre</description>
    </item>
    
  </channel>
</rss>
